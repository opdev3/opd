parameter (or (or (or (address %add_admin) (or (pair %add_loan (pair (nat %amount) (pair (mutez %deposit) (nat %reward))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (option %validity timestamp)))) (pair %add_token (address %address) (string %name)))) (or (or (nat %cancel_loan) (nat %close_deal)) (or (unit %default) (option %delegate key_hash)))) (or (or (or (nat %make_deal) (bool %pause)) (or (address %remove_admin) (string %remove_token))) (or (or (nat %set_fee) (mutez %set_min_deposit)) (or (pair %set_time (nat %max) (nat %min)) (pair %withdraw (address %address) (mutez %amount))))));
storage   (pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                # == add_admin ==
                # sp.verify(sp.amount == sp.tez(0), 'OD_ILLEGAL_TX_AMOUNT') # @parameter%add_admin : @storage
                PUSH mutez 0; # mutez : @parameter%add_admin : @storage
                AMOUNT;     # @amount : mutez : @parameter%add_admin : @storage
                COMPARE;    # int : @parameter%add_admin : @storage
                EQ;         # bool : @parameter%add_admin : @storage
                IF
                  {}
                  {
                    PUSH string "OD_ILLEGAL_TX_AMOUNT"; # string : @parameter%add_admin : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%add_admin : @storage
                SWAP;       # @storage : @parameter%add_admin
                # sp.verify(self.data.admins.contains(sp.sender), 'OD_ACCESS_DENIED') # @storage : @parameter%add_admin
                DUP;        # @storage : @storage : @parameter%add_admin
                DUG 2;      # @storage : @parameter%add_admin : @storage
                CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%add_admin : @storage
                CAR;        # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : @parameter%add_admin : @storage
                CAR;        # set address : @parameter%add_admin : @storage
                SENDER;     # @sender : set address : @parameter%add_admin : @storage
                MEM;        # bool : @parameter%add_admin : @storage
                IF
                  {}
                  {
                    PUSH string "OD_ACCESS_DENIED"; # string : @parameter%add_admin : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%add_admin : @storage
                SWAP;       # @storage : @parameter%add_admin
                # sp.verify(~ (self.data.admins.contains(params.address)), 'OD_ILLEGAL_ARGUMENT:address') # @storage : @parameter%add_admin
                DUP;        # @storage : @storage : @parameter%add_admin
                DUG 2;      # @storage : @parameter%add_admin : @storage
                CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%add_admin : @storage
                CAR;        # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : @parameter%add_admin : @storage
                CAR;        # set address : @parameter%add_admin : @storage
                SWAP;       # @parameter%add_admin : set address : @storage
                DUP;        # @parameter%add_admin : @parameter%add_admin : set address : @storage
                DUG 2;      # @parameter%add_admin : set address : @parameter%add_admin : @storage
                MEM;        # bool : @parameter%add_admin : @storage
                IF
                  {
                    PUSH string "OD_ILLEGAL_ARGUMENT:address"; # string : @parameter%add_admin : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%add_admin : @storage
                SWAP;       # @storage : @parameter%add_admin
                # self.data.admins.add(params.address) # @storage : @parameter%add_admin
                UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%add_admin
                UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%add_admin
                UNPAIR;     # set address : pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%add_admin
                PUSH bool True; # bool : set address : pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%add_admin
                DIG 5;      # @parameter%add_admin : bool : set address : pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                UPDATE;     # set address : pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                PAIR;       # pair (set address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                PAIR;       # pair (pair (set address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                PAIR;       # pair (pair (pair (set address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%add_loan
                    # == add_loan ==
                    # sp.verify(~ self.data.pause, 'OD_PAUSED') # @storage : @parameter%add_loan
                    DUP;        # @storage : @storage : @parameter%add_loan
                    DUG 2;      # @storage : @parameter%add_loan : @storage
                    GET 5;      # bool : @parameter%add_loan : @storage
                    IF
                      {
                        PUSH string "OD_PAUSED"; # string : @parameter%add_loan : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @parameter%add_loan : @storage
                    SWAP;       # @storage : @parameter%add_loan
                    # sp.verify(self.data.tokens.contains(params.token), 'OD_ILLEGAL_ARGUMENT:token') # @storage : @parameter%add_loan
                    DUP;        # @storage : @storage : @parameter%add_loan
                    DUG 2;      # @storage : @parameter%add_loan : @storage
                    GET 8;      # big_map string address : @parameter%add_loan : @storage
                    SWAP;       # @parameter%add_loan : big_map string address : @storage
                    DUP;        # @parameter%add_loan : @parameter%add_loan : big_map string address : @storage
                    DUG 2;      # @parameter%add_loan : big_map string address : @parameter%add_loan : @storage
                    GET 3;      # pair (nat %time) (string %token) : big_map string address : @parameter%add_loan : @storage
                    CDR;        # string : big_map string address : @parameter%add_loan : @storage
                    MEM;        # bool : @parameter%add_loan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:token"; # string : @parameter%add_loan : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%add_loan : @storage
                    # sp.verify(self.data.tokens[params.token] == params.token_address, 'OD_ILLEGAL_ARGUMENT:token_address') # @parameter%add_loan : @storage
                    DUP;        # @parameter%add_loan : @parameter%add_loan : @storage
                    GET 5;      # address : @parameter%add_loan : @storage
                    DUP 3;      # @storage : address : @parameter%add_loan : @storage
                    GET 8;      # big_map string address : address : @parameter%add_loan : @storage
                    DUP 3;      # @parameter%add_loan : big_map string address : address : @parameter%add_loan : @storage
                    GET 3;      # pair (nat %time) (string %token) : big_map string address : address : @parameter%add_loan : @storage
                    CDR;        # string : big_map string address : address : @parameter%add_loan : @storage
                    GET;        # option address : address : @parameter%add_loan : @storage
                    IF_NONE
                      {
                        PUSH int 225; # int : address : @parameter%add_loan : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : @parameter%add_loan : @storage
                    COMPARE;    # int : @parameter%add_loan : @storage
                    EQ;         # bool : @parameter%add_loan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:token_address"; # string : @parameter%add_loan : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%add_loan : @storage
                    # sp.verify(params.amount > 0, 'OD_ILLEGAL_ARGUMENT:amount') # @parameter%add_loan : @storage
                    DUP;        # @parameter%add_loan : @parameter%add_loan : @storage
                    CAR;        # pair (nat %amount) (pair (mutez %deposit) (nat %reward)) : @parameter%add_loan : @storage
                    CAR;        # nat : @parameter%add_loan : @storage
                    PUSH nat 0; # nat : nat : @parameter%add_loan : @storage
                    COMPARE;    # int : @parameter%add_loan : @storage
                    LT;         # bool : @parameter%add_loan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:amount"; # string : @parameter%add_loan : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%add_loan : @storage
                    SWAP;       # @storage : @parameter%add_loan
                    # sp.verify(params.deposit >= self.data.min_deposit, 'OD_ILLEGAL_ARGUMENT:deposit') # @storage : @parameter%add_loan
                    DUP;        # @storage : @storage : @parameter%add_loan
                    DUG 2;      # @storage : @parameter%add_loan : @storage
                    GET 3;      # pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan)) : @parameter%add_loan : @storage
                    CAR;        # mutez : @parameter%add_loan : @storage
                    SWAP;       # @parameter%add_loan : mutez : @storage
                    DUP;        # @parameter%add_loan : @parameter%add_loan : mutez : @storage
                    DUG 2;      # @parameter%add_loan : mutez : @parameter%add_loan : @storage
                    CAR;        # pair (nat %amount) (pair (mutez %deposit) (nat %reward)) : mutez : @parameter%add_loan : @storage
                    GET 3;      # mutez : mutez : @parameter%add_loan : @storage
                    COMPARE;    # int : @parameter%add_loan : @storage
                    GE;         # bool : @parameter%add_loan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:deposit"; # string : @parameter%add_loan : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%add_loan : @storage
                    SWAP;       # @storage : @parameter%add_loan
                    # sp.verify((params.time >= self.data.time.min) & (params.time <= self.data.time.max), 'OD_ILLEGAL_ARGUMENT:time') # @storage : @parameter%add_loan
                    DUP;        # @storage : @storage : @parameter%add_loan
                    DUG 2;      # @storage : @parameter%add_loan : @storage
                    GET 7;      # pair (nat %max) (nat %min) : @parameter%add_loan : @storage
                    CDR;        # nat : @parameter%add_loan : @storage
                    SWAP;       # @parameter%add_loan : nat : @storage
                    DUP;        # @parameter%add_loan : @parameter%add_loan : nat : @storage
                    DUG 2;      # @parameter%add_loan : nat : @parameter%add_loan : @storage
                    GET 3;      # pair (nat %time) (string %token) : nat : @parameter%add_loan : @storage
                    CAR;        # nat : nat : @parameter%add_loan : @storage
                    COMPARE;    # int : @parameter%add_loan : @storage
                    GE;         # bool : @parameter%add_loan : @storage
                    IF
                      {
                        SWAP;       # @storage : @parameter%add_loan
                        DUP;        # @storage : @storage : @parameter%add_loan
                        DUG 2;      # @storage : @parameter%add_loan : @storage
                        GET 7;      # pair (nat %max) (nat %min) : @parameter%add_loan : @storage
                        CAR;        # nat : @parameter%add_loan : @storage
                        SWAP;       # @parameter%add_loan : nat : @storage
                        DUP;        # @parameter%add_loan : @parameter%add_loan : nat : @storage
                        DUG 2;      # @parameter%add_loan : nat : @parameter%add_loan : @storage
                        GET 3;      # pair (nat %time) (string %token) : nat : @parameter%add_loan : @storage
                        CAR;        # nat : nat : @parameter%add_loan : @storage
                        COMPARE;    # int : @parameter%add_loan : @storage
                        LE;         # bool : @parameter%add_loan : @storage
                      }
                      {
                        PUSH bool False; # bool : @parameter%add_loan : @storage
                      }; # bool : @parameter%add_loan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:time"; # string : @parameter%add_loan : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%add_loan : @storage
                    # sp.verify((params.validity == sp.none) | (params.validity > sp.some(sp.now)), 'OD_ILLEGAL_ARGUMENT:validity') # @parameter%add_loan : @storage
                    DUP;        # @parameter%add_loan : @parameter%add_loan : @storage
                    GET 6;      # option timestamp : @parameter%add_loan : @storage
                    NONE timestamp; # option timestamp : option timestamp : @parameter%add_loan : @storage
                    COMPARE;    # int : @parameter%add_loan : @storage
                    EQ;         # bool : @parameter%add_loan : @storage
                    IF
                      {
                        PUSH bool True; # bool : @parameter%add_loan : @storage
                      }
                      {
                        NOW;        # @now : @parameter%add_loan : @storage
                        SOME;       # option timestamp : @parameter%add_loan : @storage
                        SWAP;       # @parameter%add_loan : option timestamp : @storage
                        DUP;        # @parameter%add_loan : @parameter%add_loan : option timestamp : @storage
                        DUG 2;      # @parameter%add_loan : option timestamp : @parameter%add_loan : @storage
                        GET 6;      # option timestamp : option timestamp : @parameter%add_loan : @storage
                        COMPARE;    # int : @parameter%add_loan : @storage
                        GT;         # bool : @parameter%add_loan : @storage
                      }; # bool : @parameter%add_loan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:validity"; # string : @parameter%add_loan : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%add_loan : @storage
                    # f = sp.local("f", sp.mul(((sp.fst(sp.ediv(params.deposit, sp.mutez(1)).open_some(message = sp.unit)) * params.time) * self.data.fee) // 315360000000, sp.mutez(1))) # @parameter%add_loan : @storage
                    PUSH mutez 1; # mutez : @parameter%add_loan : @storage
                    PUSH nat 315360000000; # nat : mutez : @parameter%add_loan : @storage
                    DUP 4;      # @storage : nat : mutez : @parameter%add_loan : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : nat : mutez : @parameter%add_loan : @storage
                    GET 5;      # nat : nat : mutez : @parameter%add_loan : @storage
                    DUP 4;      # @parameter%add_loan : nat : nat : mutez : @parameter%add_loan : @storage
                    GET 3;      # pair (nat %time) (string %token) : nat : nat : mutez : @parameter%add_loan : @storage
                    CAR;        # nat : nat : nat : mutez : @parameter%add_loan : @storage
                    PUSH mutez 1; # mutez : nat : nat : nat : mutez : @parameter%add_loan : @storage
                    DUP 6;      # @parameter%add_loan : mutez : nat : nat : nat : mutez : @parameter%add_loan : @storage
                    CAR;        # pair (nat %amount) (pair (mutez %deposit) (nat %reward)) : mutez : nat : nat : nat : mutez : @parameter%add_loan : @storage
                    GET 3;      # mutez : mutez : nat : nat : nat : mutez : @parameter%add_loan : @storage
                    EDIV;       # option (pair nat mutez) : nat : nat : nat : mutez : @parameter%add_loan : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : nat : mutez : @parameter%add_loan : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : mutez : @parameter%add_loan : @storage
                    CAR;        # nat : nat : nat : nat : mutez : @parameter%add_loan : @storage
                    MUL;        # nat : nat : nat : mutez : @parameter%add_loan : @storage
                    MUL;        # nat : nat : mutez : @parameter%add_loan : @storage
                    EDIV;       # option (pair nat nat) : mutez : @parameter%add_loan : @storage
                    IF_NONE
                      {
                        PUSH int 231; # int : mutez : @parameter%add_loan : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @parameter%add_loan : @storage
                      }; # nat : mutez : @parameter%add_loan : @storage
                    MUL;        # mutez : @parameter%add_loan : @storage
                    # sp.verify(sp.amount == (params.deposit + f.value), 'OD_ILLEGAL_TX_AMOUNT') # mutez : @parameter%add_loan : @storage
                    DUP;        # mutez : mutez : @parameter%add_loan : @storage
                    DUP 3;      # @parameter%add_loan : mutez : mutez : @parameter%add_loan : @storage
                    CAR;        # pair (nat %amount) (pair (mutez %deposit) (nat %reward)) : mutez : mutez : @parameter%add_loan : @storage
                    GET 3;      # mutez : mutez : mutez : @parameter%add_loan : @storage
                    ADD;        # mutez : mutez : @parameter%add_loan : @storage
                    AMOUNT;     # @amount : mutez : mutez : @parameter%add_loan : @storage
                    COMPARE;    # int : mutez : @parameter%add_loan : @storage
                    EQ;         # bool : mutez : @parameter%add_loan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_TX_AMOUNT"; # string : mutez : @parameter%add_loan : @storage
                        FAILWITH;   # FAILED
                      }; # mutez : @parameter%add_loan : @storage
                    # self.data.nloan += 1 # mutez : @parameter%add_loan : @storage
                    DIG 2;      # @storage : mutez : @parameter%add_loan
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan
                    SWAP;       # pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%add_loan
                    UNPAIR;     # pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan)) : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%add_loan
                    UNPAIR;     # mutez : pair (nat %ndeal) (nat %nloan) : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%add_loan
                    SWAP;       # pair (nat %ndeal) (nat %nloan) : mutez : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%add_loan
                    UNPAIR;     # nat : nat : mutez : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%add_loan
                    SWAP;       # nat : nat : mutez : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%add_loan
                    PUSH nat 1; # nat : nat : nat : mutez : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%add_loan
                    ADD;        # nat : nat : mutez : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%add_loan
                    SWAP;       # nat : nat : mutez : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%add_loan
                    PAIR;       # pair nat nat : mutez : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%add_loan
                    SWAP;       # mutez : pair nat nat : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%add_loan
                    PAIR;       # pair mutez (pair nat nat) : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%add_loan
                    PAIR;       # pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%add_loan
                    SWAP;       # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan
                    PAIR;       # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : mutez : @parameter%add_loan
                    # self.data.loans[self.data.nloan] = sp.record(amount = params.amount, borrower = sp.sender, deposit = params.deposit, fee = f.value, reward = params.reward, time = params.time, token = params.token, token_address = self.data.tokens[params.token], ts = sp.now, validity = params.validity) # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : mutez : @parameter%add_loan
                    DUP;        # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : mutez : @parameter%add_loan
                    DUG 3;      # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    SWAP;       # pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    UNPAIR;     # mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    SWAP;       # pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    UNPAIR;     # nat : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    SWAP;       # big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DUP 7;      # @parameter%add_loan : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    GET 6;      # option timestamp : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    NOW;        # @now : option timestamp : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    PAIR;       # pair @now (option timestamp) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DUP 9;      # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : pair @now (option timestamp) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    GET 8;      # big_map string address : pair @now (option timestamp) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DUP 9;      # @parameter%add_loan : big_map string address : pair @now (option timestamp) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    GET 3;      # pair (nat %time) (string %token) : big_map string address : pair @now (option timestamp) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CDR;        # string : big_map string address : pair @now (option timestamp) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    GET;        # option address : pair @now (option timestamp) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    IF_NONE
                      {
                        PUSH int 233; # int : pair @now (option timestamp) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair @now (option timestamp) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    PAIR;       # pair @some (pair @now (option timestamp)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DIG 7;      # @parameter%add_loan : pair @some (pair @now (option timestamp)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DUP;        # @parameter%add_loan : @parameter%add_loan : pair @some (pair @now (option timestamp)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    GET 3;      # pair (nat %time) (string %token) : @parameter%add_loan : pair @some (pair @now (option timestamp)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CDR;        # string : @parameter%add_loan : pair @some (pair @now (option timestamp)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    SWAP;       # @parameter%add_loan : string : pair @some (pair @now (option timestamp)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DUP;        # @parameter%add_loan : @parameter%add_loan : string : pair @some (pair @now (option timestamp)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DUG 9;      # @parameter%add_loan : string : pair @some (pair @now (option timestamp)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    GET 3;      # pair (nat %time) (string %token) : string : pair @some (pair @now (option timestamp)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CAR;        # nat : string : pair @some (pair @now (option timestamp)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    PAIR;       # pair nat string : pair @some (pair @now (option timestamp)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    PAIR;       # pair (pair nat string) (pair @some (pair @now (option timestamp))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DUP 8;      # @parameter%add_loan : pair (pair nat string) (pair @some (pair @now (option timestamp))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CAR;        # pair (nat %amount) (pair (mutez %deposit) (nat %reward)) : pair (pair nat string) (pair @some (pair @now (option timestamp))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    GET 4;      # nat : pair (pair nat string) (pair @some (pair @now (option timestamp))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : mutez : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DIG 7;      # mutez : nat : pair (pair nat string) (pair @some (pair @now (option timestamp))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    PAIR;       # pair mutez nat : pair (pair nat string) (pair @some (pair @now (option timestamp))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DUP 8;      # @parameter%add_loan : pair mutez nat : pair (pair nat string) (pair @some (pair @now (option timestamp))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CAR;        # pair (nat %amount) (pair (mutez %deposit) (nat %reward)) : pair mutez nat : pair (pair nat string) (pair @some (pair @now (option timestamp))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    GET 3;      # mutez : pair mutez nat : pair (pair nat string) (pair @some (pair @now (option timestamp))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    PAIR;       # pair mutez (pair mutez nat) : pair (pair nat string) (pair @some (pair @now (option timestamp))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    SENDER;     # @sender : pair mutez (pair mutez nat) : pair (pair nat string) (pair @some (pair @now (option timestamp))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%add_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DIG 8;      # @parameter%add_loan : @sender : pair mutez (pair mutez nat) : pair (pair nat string) (pair @some (pair @now (option timestamp))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CAR;        # pair (nat %amount) (pair (mutez %deposit) (nat %reward)) : @sender : pair mutez (pair mutez nat) : pair (pair nat string) (pair @some (pair @now (option timestamp))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CAR;        # nat : @sender : pair mutez (pair mutez nat) : pair (pair nat string) (pair @some (pair @now (option timestamp))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    PAIR;       # pair nat @sender : pair mutez (pair mutez nat) : pair (pair nat string) (pair @some (pair @now (option timestamp))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    PAIR;       # pair (pair nat @sender) (pair mutez (pair mutez nat)) : pair (pair nat string) (pair @some (pair @now (option timestamp))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    PAIR;       # pair (pair (pair nat @sender) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair @some (pair @now (option timestamp)))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    SOME;       # option (pair (pair (pair nat @sender) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair @some (pair @now (option timestamp))))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DIG 6;      # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : option (pair (pair (pair nat @sender) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair @some (pair @now (option timestamp))))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    GET 3;      # pair mutez (pair nat nat) : option (pair (pair (pair nat @sender) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair @some (pair @now (option timestamp))))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    GET 4;      # nat : option (pair (pair (pair nat @sender) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair @some (pair @now (option timestamp))))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    UPDATE;     # big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    SWAP;       # nat : big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    PAIR;       # pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp)))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    SWAP;       # mutez : pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    # self.data.deposits += sp.amount # mutez : pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    AMOUNT;     # @amount : mutez : pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    ADD;        # mutez : pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    PAIR;       # pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    SWAP;       # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    PAIR;       # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp)))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    PAIR;       # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                  }
                  {
                    # == add_token ==
                    # sp.verify(sp.amount == sp.tez(0), 'OD_ILLEGAL_TX_AMOUNT') # @parameter%add_token : @storage
                    PUSH mutez 0; # mutez : @parameter%add_token : @storage
                    AMOUNT;     # @amount : mutez : @parameter%add_token : @storage
                    COMPARE;    # int : @parameter%add_token : @storage
                    EQ;         # bool : @parameter%add_token : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_TX_AMOUNT"; # string : @parameter%add_token : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%add_token : @storage
                    SWAP;       # @storage : @parameter%add_token
                    # sp.verify(self.data.admins.contains(sp.sender), 'OD_ACCESS_DENIED') # @storage : @parameter%add_token
                    DUP;        # @storage : @storage : @parameter%add_token
                    DUG 2;      # @storage : @parameter%add_token : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%add_token : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : @parameter%add_token : @storage
                    CAR;        # set address : @parameter%add_token : @storage
                    SENDER;     # @sender : set address : @parameter%add_token : @storage
                    MEM;        # bool : @parameter%add_token : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%add_token : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%add_token : @storage
                    SWAP;       # @storage : @parameter%add_token
                    # self.data.tokens[params.name] = params.address # @storage : @parameter%add_token
                    DUP;        # @storage : @storage : @parameter%add_token
                    GET 8;      # big_map string address : @storage : @parameter%add_token
                    DUP 3;      # @parameter%add_token : big_map string address : @storage : @parameter%add_token
                    CAR;        # address : big_map string address : @storage : @parameter%add_token
                    SOME;       # option address : big_map string address : @storage : @parameter%add_token
                    DIG 3;      # @parameter%add_token : option address : big_map string address : @storage
                    CDR;        # string : option address : big_map string address : @storage
                    UPDATE;     # big_map string address : @storage
                    UPDATE 8;   # @storage
                  }; # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
              }; # pair (pair (pair (set address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
            NIL operation; # list operation : pair (pair (pair (set address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # == cancel_loan ==
                    # sp.verify(sp.amount == sp.tez(0), 'OD_ILLEGAL_TX_AMOUNT') # @parameter%cancel_loan : @storage
                    PUSH mutez 0; # mutez : @parameter%cancel_loan : @storage
                    AMOUNT;     # @amount : mutez : @parameter%cancel_loan : @storage
                    COMPARE;    # int : @parameter%cancel_loan : @storage
                    EQ;         # bool : @parameter%cancel_loan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_TX_AMOUNT"; # string : @parameter%cancel_loan : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%cancel_loan : @storage
                    SWAP;       # @storage : @parameter%cancel_loan
                    # sp.verify(self.data.loans.contains(params.id), 'OD_ILLEGAL_ARGUMENT:id') # @storage : @parameter%cancel_loan
                    DUP;        # @storage : @storage : @parameter%cancel_loan
                    DUG 2;      # @storage : @parameter%cancel_loan : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%cancel_loan : @storage
                    GET 6;      # big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @parameter%cancel_loan : @storage
                    SWAP;       # @parameter%cancel_loan : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @storage
                    DUP;        # @parameter%cancel_loan : @parameter%cancel_loan : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @storage
                    DUG 2;      # @parameter%cancel_loan : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @parameter%cancel_loan : @storage
                    MEM;        # bool : @parameter%cancel_loan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:id"; # string : @parameter%cancel_loan : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%cancel_loan : @storage
                    SWAP;       # @storage : @parameter%cancel_loan
                    # loan = sp.local("loan", self.data.loans[params.id]) # @storage : @parameter%cancel_loan
                    DUP;        # @storage : @storage : @parameter%cancel_loan
                    DUG 2;      # @storage : @parameter%cancel_loan : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%cancel_loan : @storage
                    GET 6;      # big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @parameter%cancel_loan : @storage
                    SWAP;       # @parameter%cancel_loan : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @storage
                    DUP;        # @parameter%cancel_loan : @parameter%cancel_loan : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @storage
                    DUG 2;      # @parameter%cancel_loan : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @parameter%cancel_loan : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @parameter%cancel_loan : @storage
                    IF_NONE
                      {
                        PUSH int 258; # int : @parameter%cancel_loan : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%cancel_loan : @storage
                    # sp.verify((sp.sender == loan.value.borrower) | (self.data.admins.contains(sp.sender)), 'OD_ACCESS_DENIED') # @some : @parameter%cancel_loan : @storage
                    DUP;        # @some : @some : @parameter%cancel_loan : @storage
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : @some : @parameter%cancel_loan : @storage
                    CAR;        # pair (nat %amount) (address %borrower) : @some : @parameter%cancel_loan : @storage
                    CDR;        # address : @some : @parameter%cancel_loan : @storage
                    SENDER;     # @sender : address : @some : @parameter%cancel_loan : @storage
                    COMPARE;    # int : @some : @parameter%cancel_loan : @storage
                    EQ;         # bool : @some : @parameter%cancel_loan : @storage
                    IF
                      {
                        PUSH bool True; # bool : @some : @parameter%cancel_loan : @storage
                      }
                      {
                        DUP 3;      # @storage : @some : @parameter%cancel_loan : @storage
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @some : @parameter%cancel_loan : @storage
                        CAR;        # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : @some : @parameter%cancel_loan : @storage
                        CAR;        # set address : @some : @parameter%cancel_loan : @storage
                        SENDER;     # @sender : set address : @some : @parameter%cancel_loan : @storage
                        MEM;        # bool : @some : @parameter%cancel_loan : @storage
                      }; # bool : @some : @parameter%cancel_loan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @some : @parameter%cancel_loan : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%cancel_loan : @storage
                    # if loan.value.deposit > sp.tez(0): # @some : @parameter%cancel_loan : @storage
                    DUP;        # @some : @some : @parameter%cancel_loan : @storage
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : @some : @parameter%cancel_loan : @storage
                    GET 3;      # mutez : @some : @parameter%cancel_loan : @storage
                    PUSH mutez 0; # mutez : mutez : @some : @parameter%cancel_loan : @storage
                    COMPARE;    # int : @some : @parameter%cancel_loan : @storage
                    LT;         # bool : @some : @parameter%cancel_loan : @storage
                    IF
                      {
                        # sp.send(loan.value.borrower, loan.value.deposit + loan.value.fee) # @some : @parameter%cancel_loan : @storage
                        DUP;        # @some : @some : @parameter%cancel_loan : @storage
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : @some : @parameter%cancel_loan : @storage
                        CAR;        # pair (nat %amount) (address %borrower) : @some : @parameter%cancel_loan : @storage
                        CDR;        # address : @some : @parameter%cancel_loan : @storage
                        CONTRACT unit; # option (contract unit) : @some : @parameter%cancel_loan : @storage
                        IF_NONE
                          {
                            PUSH int 261; # int : @some : @parameter%cancel_loan : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : @parameter%cancel_loan : @storage
                        NIL operation; # list operation : @some : @some : @parameter%cancel_loan : @storage
                        SWAP;       # @some : list operation : @some : @parameter%cancel_loan : @storage
                        DIG 2;      # @some : @some : list operation : @parameter%cancel_loan : @storage
                        DUP;        # @some : @some : @some : list operation : @parameter%cancel_loan : @storage
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : @some : @some : list operation : @parameter%cancel_loan : @storage
                        GET 5;      # mutez : @some : @some : list operation : @parameter%cancel_loan : @storage
                        SWAP;       # @some : mutez : @some : list operation : @parameter%cancel_loan : @storage
                        DUP;        # @some : @some : mutez : @some : list operation : @parameter%cancel_loan : @storage
                        DUG 4;      # @some : mutez : @some : list operation : @some : @parameter%cancel_loan : @storage
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : mutez : @some : list operation : @some : @parameter%cancel_loan : @storage
                        GET 3;      # mutez : mutez : @some : list operation : @some : @parameter%cancel_loan : @storage
                        ADD;        # mutez : @some : list operation : @some : @parameter%cancel_loan : @storage
                        UNIT;       # unit : mutez : @some : list operation : @some : @parameter%cancel_loan : @storage
                        TRANSFER_TOKENS; # operation : list operation : @some : @parameter%cancel_loan : @storage
                        CONS;       # list operation : @some : @parameter%cancel_loan : @storage
                        # self.data.deposits -= loan.value.deposit + loan.value.fee # list operation : @some : @parameter%cancel_loan : @storage
                        DIG 3;      # @storage : list operation : @some : @parameter%cancel_loan
                        UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%cancel_loan
                        UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%cancel_loan
                        SWAP;       # pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%cancel_loan
                        UNPAIR;     # mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%cancel_loan
                        DIG 5;      # @some : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                        DUP;        # @some : @some : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : @some : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                        GET 5;      # mutez : @some : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                        SWAP;       # @some : mutez : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : mutez : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                        GET 3;      # mutez : mutez : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                        ADD;        # mutez : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                        SWAP;       # mutez : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                        SUB_MUTEZ;  # option mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                        IF_NONE
                          {
                            PUSH int 262; # int : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                        PAIR;       # pair @some (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                        SWAP;       # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair @some (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                        PAIR;       # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair @some (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                        PAIR;       # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair @some (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : list operation : @parameter%cancel_loan
                        DUG 2;      # list operation : @parameter%cancel_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair @some (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                      }
                      {
                        DROP;       # @parameter%cancel_loan : @storage
                        NIL operation; # list operation : @parameter%cancel_loan : @storage
                      }; # list operation : @parameter%cancel_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    # del self.data.loans[params.id] # list operation : @parameter%cancel_loan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DIG 2;      # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : list operation : @parameter%cancel_loan
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                    UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                    SWAP;       # pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                    UNPAIR;     # mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                    SWAP;       # pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                    UNPAIR;     # nat : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                    SWAP;       # big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                    NONE (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))); # option (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%cancel_loan
                    DIG 7;      # @parameter%cancel_loan : option (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    UPDATE;     # big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    SWAP;       # nat : big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    PAIR;       # pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp)))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    SWAP;       # mutez : pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    PAIR;       # pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    SWAP;       # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    PAIR;       # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    PAIR;       # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : list operation
                    SWAP;       # list operation : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                  }
                  {
                    # == close_deal ==
                    # sp.verify(sp.amount == sp.tez(0), 'OD_ILLEGAL_TX_AMOUNT') # @parameter%close_deal : @storage
                    PUSH mutez 0; # mutez : @parameter%close_deal : @storage
                    AMOUNT;     # @amount : mutez : @parameter%close_deal : @storage
                    COMPARE;    # int : @parameter%close_deal : @storage
                    EQ;         # bool : @parameter%close_deal : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_TX_AMOUNT"; # string : @parameter%close_deal : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%close_deal : @storage
                    SWAP;       # @storage : @parameter%close_deal
                    # sp.verify(self.data.deals.contains(params.id), 'OD_ILLEGAL_ARGUMENT:id') # @storage : @parameter%close_deal
                    DUP;        # @storage : @storage : @parameter%close_deal
                    DUG 2;      # @storage : @parameter%close_deal : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%close_deal : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : @parameter%close_deal : @storage
                    GET 4;      # big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : @parameter%close_deal : @storage
                    SWAP;       # @parameter%close_deal : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : @storage
                    DUP;        # @parameter%close_deal : @parameter%close_deal : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : @storage
                    DUG 2;      # @parameter%close_deal : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : @parameter%close_deal : @storage
                    MEM;        # bool : @parameter%close_deal : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:id"; # string : @parameter%close_deal : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%close_deal : @storage
                    SWAP;       # @storage : @parameter%close_deal
                    # deal = sp.local("deal", self.data.deals[params.id]) # @storage : @parameter%close_deal
                    DUP;        # @storage : @storage : @parameter%close_deal
                    DUG 2;      # @storage : @parameter%close_deal : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%close_deal : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : @parameter%close_deal : @storage
                    GET 4;      # big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : @parameter%close_deal : @storage
                    SWAP;       # @parameter%close_deal : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : @storage
                    DUP;        # @parameter%close_deal : @parameter%close_deal : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : @storage
                    DUG 2;      # @parameter%close_deal : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : @parameter%close_deal : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : @parameter%close_deal : @storage
                    IF_NONE
                      {
                        PUSH int 306; # int : @parameter%close_deal : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%close_deal : @storage
                    # sp.verify(((sp.sender == deal.value.borrower) | (sp.sender == deal.value.creditor)) | (self.data.admins.contains(sp.sender)), 'OD_ACCESS_DENIED') # @some : @parameter%close_deal : @storage
                    DUP;        # @some : @some : @parameter%close_deal : @storage
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : @some : @parameter%close_deal : @storage
                    CAR;        # pair (nat %amount) (address %borrower) : @some : @parameter%close_deal : @storage
                    CDR;        # address : @some : @parameter%close_deal : @storage
                    SENDER;     # @sender : address : @some : @parameter%close_deal : @storage
                    COMPARE;    # int : @some : @parameter%close_deal : @storage
                    EQ;         # bool : @some : @parameter%close_deal : @storage
                    IF
                      {
                        PUSH bool True; # bool : @some : @parameter%close_deal : @storage
                      }
                      {
                        DUP;        # @some : @some : @parameter%close_deal : @storage
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : @some : @parameter%close_deal : @storage
                        GET 3;      # address : @some : @parameter%close_deal : @storage
                        SENDER;     # @sender : address : @some : @parameter%close_deal : @storage
                        COMPARE;    # int : @some : @parameter%close_deal : @storage
                        EQ;         # bool : @some : @parameter%close_deal : @storage
                      }; # bool : @some : @parameter%close_deal : @storage
                    IF
                      {
                        PUSH bool True; # bool : @some : @parameter%close_deal : @storage
                      }
                      {
                        DUP 3;      # @storage : @some : @parameter%close_deal : @storage
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @some : @parameter%close_deal : @storage
                        CAR;        # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : @some : @parameter%close_deal : @storage
                        CAR;        # set address : @some : @parameter%close_deal : @storage
                        SENDER;     # @sender : set address : @some : @parameter%close_deal : @storage
                        MEM;        # bool : @some : @parameter%close_deal : @storage
                      }; # bool : @some : @parameter%close_deal : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @some : @parameter%close_deal : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%close_deal : @storage
                    # if sp.sender == deal.value.borrower: # @some : @parameter%close_deal : @storage
                    DUP;        # @some : @some : @parameter%close_deal : @storage
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : @some : @parameter%close_deal : @storage
                    CAR;        # pair (nat %amount) (address %borrower) : @some : @parameter%close_deal : @storage
                    CDR;        # address : @some : @parameter%close_deal : @storage
                    SENDER;     # @sender : address : @some : @parameter%close_deal : @storage
                    COMPARE;    # int : @some : @parameter%close_deal : @storage
                    EQ;         # bool : @some : @parameter%close_deal : @storage
                    IF
                      {
                        # sp.transfer(sp.record(from_ = deal.value.borrower, to_ = deal.value.creditor, value = deal.value.amount + deal.value.reward), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), deal.value.token_address, entry_point='transfer').open_some()) # @some : @parameter%close_deal : @storage
                        DUP;        # @some : @some : @parameter%close_deal : @storage
                        GET 7;      # address : @some : @parameter%close_deal : @storage
                        CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : @some : @parameter%close_deal : @storage
                        IF_NONE
                          {
                            PUSH int 330; # int : @some : @parameter%close_deal : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : @parameter%close_deal : @storage
                        NIL operation; # list operation : @some : @some : @parameter%close_deal : @storage
                        SWAP;       # @some : list operation : @some : @parameter%close_deal : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @some : @parameter%close_deal : @storage
                        DIG 3;      # @some : mutez : @some : list operation : @parameter%close_deal : @storage
                        DUP;        # @some : @some : mutez : @some : list operation : @parameter%close_deal : @storage
                        GET 3;      # pair (timestamp %exp) (nat %reward) : @some : mutez : @some : list operation : @parameter%close_deal : @storage
                        CDR;        # nat : @some : mutez : @some : list operation : @parameter%close_deal : @storage
                        SWAP;       # @some : nat : mutez : @some : list operation : @parameter%close_deal : @storage
                        DUP;        # @some : @some : nat : mutez : @some : list operation : @parameter%close_deal : @storage
                        DUG 5;      # @some : nat : mutez : @some : list operation : @some : @parameter%close_deal : @storage
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : nat : mutez : @some : list operation : @some : @parameter%close_deal : @storage
                        CAR;        # pair (nat %amount) (address %borrower) : nat : mutez : @some : list operation : @some : @parameter%close_deal : @storage
                        CAR;        # nat : nat : mutez : @some : list operation : @some : @parameter%close_deal : @storage
                        ADD;        # nat : mutez : @some : list operation : @some : @parameter%close_deal : @storage
                        DIG 4;      # @some : nat : mutez : @some : list operation : @parameter%close_deal : @storage
                        DUP;        # @some : @some : nat : mutez : @some : list operation : @parameter%close_deal : @storage
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : @some : nat : mutez : @some : list operation : @parameter%close_deal : @storage
                        GET 3;      # address : @some : nat : mutez : @some : list operation : @parameter%close_deal : @storage
                        SWAP;       # @some : address : nat : mutez : @some : list operation : @parameter%close_deal : @storage
                        DUP;        # @some : @some : address : nat : mutez : @some : list operation : @parameter%close_deal : @storage
                        DUG 6;      # @some : address : nat : mutez : @some : list operation : @some : @parameter%close_deal : @storage
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : address : nat : mutez : @some : list operation : @some : @parameter%close_deal : @storage
                        CAR;        # pair (nat %amount) (address %borrower) : address : nat : mutez : @some : list operation : @some : @parameter%close_deal : @storage
                        CDR;        # address : address : nat : mutez : @some : list operation : @some : @parameter%close_deal : @storage
                        PAIR 3;     # pair address (pair address nat) : mutez : @some : list operation : @some : @parameter%close_deal : @storage
                        TRANSFER_TOKENS; # operation : list operation : @some : @parameter%close_deal : @storage
                        CONS;       # list operation : @some : @parameter%close_deal : @storage
                        # if deal.value.deposit > sp.tez(0): # list operation : @some : @parameter%close_deal : @storage
                        PUSH mutez 0; # mutez : list operation : @some : @parameter%close_deal : @storage
                        DUP 3;      # @some : mutez : list operation : @some : @parameter%close_deal : @storage
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : mutez : list operation : @some : @parameter%close_deal : @storage
                        GET 4;      # mutez : mutez : list operation : @some : @parameter%close_deal : @storage
                        COMPARE;    # int : list operation : @some : @parameter%close_deal : @storage
                        GT;         # bool : list operation : @some : @parameter%close_deal : @storage
                        IF
                          {
                            SWAP;       # @some : list operation : @parameter%close_deal : @storage
                            # sp.send(deal.value.borrower, deal.value.deposit) # @some : list operation : @parameter%close_deal : @storage
                            DUP;        # @some : @some : list operation : @parameter%close_deal : @storage
                            DUG 2;      # @some : list operation : @some : @parameter%close_deal : @storage
                            CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : list operation : @some : @parameter%close_deal : @storage
                            CAR;        # pair (nat %amount) (address %borrower) : list operation : @some : @parameter%close_deal : @storage
                            CDR;        # address : list operation : @some : @parameter%close_deal : @storage
                            CONTRACT unit; # option (contract unit) : list operation : @some : @parameter%close_deal : @storage
                            IF_NONE
                              {
                                PUSH int 311; # int : list operation : @some : @parameter%close_deal : @storage
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : list operation : @some : @parameter%close_deal : @storage
                            DUP 3;      # @some : @some : list operation : @some : @parameter%close_deal : @storage
                            CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : @some : list operation : @some : @parameter%close_deal : @storage
                            GET 4;      # mutez : @some : list operation : @some : @parameter%close_deal : @storage
                            UNIT;       # unit : mutez : @some : list operation : @some : @parameter%close_deal : @storage
                            TRANSFER_TOKENS; # operation : list operation : @some : @parameter%close_deal : @storage
                            CONS;       # list operation : @some : @parameter%close_deal : @storage
                            # self.data.deposits -= deal.value.deposit # list operation : @some : @parameter%close_deal : @storage
                            DIG 3;      # @storage : list operation : @some : @parameter%close_deal
                            UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%close_deal
                            UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%close_deal
                            SWAP;       # pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%close_deal
                            UNPAIR;     # mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%close_deal
                            DIG 5;      # @some : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            GET 4;      # mutez : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            SWAP;       # mutez : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            SUB_MUTEZ;  # option mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            IF_NONE
                              {
                                PUSH int 312; # int : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            PAIR;       # pair @some (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            SWAP;       # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair @some (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            PAIR;       # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair @some (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            PAIR;       # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair @some (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : list operation : @parameter%close_deal
                            DUG 2;      # list operation : @parameter%close_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair @some (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                          }
                          {
                            SWAP;       # @some : list operation : @parameter%close_deal : @storage
                            DROP;       # list operation : @parameter%close_deal : @storage
                          }; # list operation : @parameter%close_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                      }
                      {
                        # sp.verify(deal.value.exp < sp.now, 'OD_ACCESS_DENIED') # @some : @parameter%close_deal : @storage
                        DUP;        # @some : @some : @parameter%close_deal : @storage
                        GET 3;      # pair (timestamp %exp) (nat %reward) : @some : @parameter%close_deal : @storage
                        CAR;        # timestamp : @some : @parameter%close_deal : @storage
                        NOW;        # @now : timestamp : @some : @parameter%close_deal : @storage
                        COMPARE;    # int : @some : @parameter%close_deal : @storage
                        GT;         # bool : @some : @parameter%close_deal : @storage
                        IF
                          {}
                          {
                            PUSH string "OD_ACCESS_DENIED"; # string : @some : @parameter%close_deal : @storage
                            FAILWITH;   # FAILED
                          }; # @some : @parameter%close_deal : @storage
                        # if deal.value.deposit > sp.tez(0): # @some : @parameter%close_deal : @storage
                        DUP;        # @some : @some : @parameter%close_deal : @storage
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : @some : @parameter%close_deal : @storage
                        GET 4;      # mutez : @some : @parameter%close_deal : @storage
                        PUSH mutez 0; # mutez : mutez : @some : @parameter%close_deal : @storage
                        COMPARE;    # int : @some : @parameter%close_deal : @storage
                        LT;         # bool : @some : @parameter%close_deal : @storage
                        IF
                          {
                            # sp.send(deal.value.creditor, deal.value.deposit) # @some : @parameter%close_deal : @storage
                            DUP;        # @some : @some : @parameter%close_deal : @storage
                            CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : @some : @parameter%close_deal : @storage
                            GET 3;      # address : @some : @parameter%close_deal : @storage
                            CONTRACT unit; # option (contract unit) : @some : @parameter%close_deal : @storage
                            IF_NONE
                              {
                                PUSH int 316; # int : @some : @parameter%close_deal : @storage
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : @some : @parameter%close_deal : @storage
                            NIL operation; # list operation : @some : @some : @parameter%close_deal : @storage
                            SWAP;       # @some : list operation : @some : @parameter%close_deal : @storage
                            DUP 3;      # @some : @some : list operation : @some : @parameter%close_deal : @storage
                            CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : @some : list operation : @some : @parameter%close_deal : @storage
                            GET 4;      # mutez : @some : list operation : @some : @parameter%close_deal : @storage
                            UNIT;       # unit : mutez : @some : list operation : @some : @parameter%close_deal : @storage
                            TRANSFER_TOKENS; # operation : list operation : @some : @parameter%close_deal : @storage
                            CONS;       # list operation : @some : @parameter%close_deal : @storage
                            # self.data.deposits -= deal.value.deposit # list operation : @some : @parameter%close_deal : @storage
                            DIG 3;      # @storage : list operation : @some : @parameter%close_deal
                            UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%close_deal
                            UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%close_deal
                            SWAP;       # pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%close_deal
                            UNPAIR;     # mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%close_deal
                            DIG 5;      # @some : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            GET 4;      # mutez : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            SWAP;       # mutez : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            SUB_MUTEZ;  # option mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            IF_NONE
                              {
                                PUSH int 317; # int : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                                FAILWITH;   # FAILED
                              }
                              {}; # @some : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            PAIR;       # pair @some (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            SWAP;       # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair @some (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            PAIR;       # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair @some (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                            PAIR;       # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair @some (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : list operation : @parameter%close_deal
                            DUG 2;      # list operation : @parameter%close_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair @some (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                          }
                          {
                            DROP;       # @parameter%close_deal : @storage
                            NIL operation; # list operation : @parameter%close_deal : @storage
                          }; # list operation : @parameter%close_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                      }; # list operation : @parameter%close_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    # del self.data.deals[params.id] # list operation : @parameter%close_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DIG 2;      # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : list operation : @parameter%close_deal
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                    UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                    UNPAIR;     # set address : pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))) : pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                    SWAP;       # pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))) : set address : pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                    UNPAIR;     # option key_hash : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : set address : pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                    SWAP;       # big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                    NONE (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))); # option (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%close_deal
                    DIG 7;      # @parameter%close_deal : option (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    UPDATE;     # big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))) : option key_hash : set address : pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    SWAP;       # option key_hash : big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))) : set address : pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    PAIR;       # pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))) : set address : pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    SWAP;       # set address : pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))) : pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    PAIR;       # pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    PAIR;       # pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    PAIR;       # pair (pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : list operation
                    SWAP;       # list operation : pair (pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                  }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
              }
              {
                IF_LEFT
                  {
                    DROP;       # @storage
                    # == default == # @storage
                    NIL operation; # list operation : @storage
                  }
                  {
                    # == delegate ==
                    # sp.verify(sp.amount == sp.tez(0), 'OD_ILLEGAL_TX_AMOUNT') # @parameter%delegate : @storage
                    PUSH mutez 0; # mutez : @parameter%delegate : @storage
                    AMOUNT;     # @amount : mutez : @parameter%delegate : @storage
                    COMPARE;    # int : @parameter%delegate : @storage
                    EQ;         # bool : @parameter%delegate : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_TX_AMOUNT"; # string : @parameter%delegate : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%delegate : @storage
                    SWAP;       # @storage : @parameter%delegate
                    # sp.verify(self.data.admins.contains(sp.sender), 'OD_ACCESS_DENIED') # @storage : @parameter%delegate
                    DUP;        # @storage : @storage : @parameter%delegate
                    DUG 2;      # @storage : @parameter%delegate : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%delegate : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : @parameter%delegate : @storage
                    CAR;        # set address : @parameter%delegate : @storage
                    SENDER;     # @sender : set address : @parameter%delegate : @storage
                    MEM;        # bool : @parameter%delegate : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%delegate : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%delegate : @storage
                    # sp.verify(self.data.baker != params.baker, 'OD_ILLEGAL_ARGUMENT:baker') # @parameter%delegate : @storage
                    DUP;        # @parameter%delegate : @parameter%delegate : @storage
                    DUP 3;      # @storage : @parameter%delegate : @parameter%delegate : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%delegate : @parameter%delegate : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : @parameter%delegate : @parameter%delegate : @storage
                    GET 3;      # option key_hash : @parameter%delegate : @parameter%delegate : @storage
                    COMPARE;    # int : @parameter%delegate : @storage
                    NEQ;        # bool : @parameter%delegate : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:baker"; # string : @parameter%delegate : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%delegate : @storage
                    SWAP;       # @storage : @parameter%delegate
                    # self.data.baker = params.baker # @storage : @parameter%delegate
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%delegate
                    UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%delegate
                    UNPAIR;     # set address : pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%delegate
                    SWAP;       # pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))) : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%delegate
                    CDR;        # big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%delegate
                    DUP 5;      # @parameter%delegate : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%delegate
                    PAIR;       # pair @parameter%delegate (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))) : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%delegate
                    SWAP;       # set address : pair @parameter%delegate (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%delegate
                    PAIR;       # pair (set address) (pair @parameter%delegate (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%delegate
                    PAIR;       # pair (pair (set address) (pair @parameter%delegate (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%delegate
                    PAIR;       # pair (pair (pair (set address) (pair @parameter%delegate (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : @parameter%delegate
                    SWAP;       # @parameter%delegate : pair (pair (pair (set address) (pair @parameter%delegate (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    # sp.set_delegate(params.baker) # @parameter%delegate : pair (pair (pair (set address) (pair @parameter%delegate (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    SET_DELEGATE; # operation : pair (pair (pair (set address) (pair @parameter%delegate (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    NIL operation; # list operation : operation : pair (pair (pair (set address) (pair @parameter%delegate (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    SWAP;       # operation : list operation : pair (pair (pair (set address) (pair @parameter%delegate (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CONS;       # list operation : pair (pair (pair (set address) (pair @parameter%delegate (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                  }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
              }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
          }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%make_deal
                    # == make_deal ==
                    # sp.verify(~ self.data.pause, 'OD_PAUSED') # @storage : @parameter%make_deal
                    DUP;        # @storage : @storage : @parameter%make_deal
                    DUG 2;      # @storage : @parameter%make_deal : @storage
                    GET 5;      # bool : @parameter%make_deal : @storage
                    IF
                      {
                        PUSH string "OD_PAUSED"; # string : @parameter%make_deal : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @parameter%make_deal : @storage
                    # sp.verify(sp.amount == sp.tez(0), 'OD_ILLEGAL_TX_AMOUNT') # @parameter%make_deal : @storage
                    PUSH mutez 0; # mutez : @parameter%make_deal : @storage
                    AMOUNT;     # @amount : mutez : @parameter%make_deal : @storage
                    COMPARE;    # int : @parameter%make_deal : @storage
                    EQ;         # bool : @parameter%make_deal : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_TX_AMOUNT"; # string : @parameter%make_deal : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%make_deal : @storage
                    SWAP;       # @storage : @parameter%make_deal
                    # sp.verify(self.data.loans.contains(params.id), 'OD_ILLEGAL_ARGUMENT:id') # @storage : @parameter%make_deal
                    DUP;        # @storage : @storage : @parameter%make_deal
                    DUG 2;      # @storage : @parameter%make_deal : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%make_deal : @storage
                    GET 6;      # big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @parameter%make_deal : @storage
                    SWAP;       # @parameter%make_deal : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @storage
                    DUP;        # @parameter%make_deal : @parameter%make_deal : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @storage
                    DUG 2;      # @parameter%make_deal : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @parameter%make_deal : @storage
                    MEM;        # bool : @parameter%make_deal : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:id"; # string : @parameter%make_deal : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%make_deal : @storage
                    SWAP;       # @storage : @parameter%make_deal
                    # loan = sp.local("loan", self.data.loans[params.id]) # @storage : @parameter%make_deal
                    DUP;        # @storage : @storage : @parameter%make_deal
                    DUG 2;      # @storage : @parameter%make_deal : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%make_deal : @storage
                    GET 6;      # big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @parameter%make_deal : @storage
                    SWAP;       # @parameter%make_deal : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @storage
                    DUP;        # @parameter%make_deal : @parameter%make_deal : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @storage
                    DUG 2;      # @parameter%make_deal : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @parameter%make_deal : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @parameter%make_deal : @storage
                    IF_NONE
                      {
                        PUSH int 275; # int : @parameter%make_deal : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%make_deal : @storage
                    # sp.verify(loan.value.borrower != sp.sender, 'OD_ILLEGAL_ARGUMENT:sender') # @some : @parameter%make_deal : @storage
                    DUP;        # @some : @some : @parameter%make_deal : @storage
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : @some : @parameter%make_deal : @storage
                    CAR;        # pair (nat %amount) (address %borrower) : @some : @parameter%make_deal : @storage
                    CDR;        # address : @some : @parameter%make_deal : @storage
                    SENDER;     # @sender : address : @some : @parameter%make_deal : @storage
                    COMPARE;    # int : @some : @parameter%make_deal : @storage
                    NEQ;        # bool : @some : @parameter%make_deal : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:sender"; # string : @some : @parameter%make_deal : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%make_deal : @storage
                    # sp.verify((loan.value.validity == sp.none) | (loan.value.validity > sp.some(sp.now)), 'OD_ILLEGAL_ARGUMENT:now') # @some : @parameter%make_deal : @storage
                    DUP;        # @some : @some : @parameter%make_deal : @storage
                    GET 8;      # option timestamp : @some : @parameter%make_deal : @storage
                    NONE timestamp; # option timestamp : option timestamp : @some : @parameter%make_deal : @storage
                    COMPARE;    # int : @some : @parameter%make_deal : @storage
                    EQ;         # bool : @some : @parameter%make_deal : @storage
                    IF
                      {
                        PUSH bool True; # bool : @some : @parameter%make_deal : @storage
                      }
                      {
                        NOW;        # @now : @some : @parameter%make_deal : @storage
                        SOME;       # option timestamp : @some : @parameter%make_deal : @storage
                        SWAP;       # @some : option timestamp : @parameter%make_deal : @storage
                        DUP;        # @some : @some : option timestamp : @parameter%make_deal : @storage
                        DUG 2;      # @some : option timestamp : @some : @parameter%make_deal : @storage
                        GET 8;      # option timestamp : option timestamp : @some : @parameter%make_deal : @storage
                        COMPARE;    # int : @some : @parameter%make_deal : @storage
                        GT;         # bool : @some : @parameter%make_deal : @storage
                      }; # bool : @some : @parameter%make_deal : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:now"; # string : @some : @parameter%make_deal : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%make_deal : @storage
                    # sp.transfer(sp.record(from_ = sp.sender, to_ = loan.value.borrower, value = loan.value.amount), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), loan.value.token_address, entry_point='transfer').open_some()) # @some : @parameter%make_deal : @storage
                    DUP;        # @some : @some : @parameter%make_deal : @storage
                    GET 5;      # address : @some : @parameter%make_deal : @storage
                    CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : @some : @parameter%make_deal : @storage
                    IF_NONE
                      {
                        PUSH int 330; # int : @some : @parameter%make_deal : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @some : @parameter%make_deal : @storage
                    NIL operation; # list operation : @some : @some : @parameter%make_deal : @storage
                    SWAP;       # @some : list operation : @some : @parameter%make_deal : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @some : @parameter%make_deal : @storage
                    DIG 3;      # @some : mutez : @some : list operation : @parameter%make_deal : @storage
                    DUP;        # @some : @some : mutez : @some : list operation : @parameter%make_deal : @storage
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : @some : mutez : @some : list operation : @parameter%make_deal : @storage
                    CAR;        # pair (nat %amount) (address %borrower) : @some : mutez : @some : list operation : @parameter%make_deal : @storage
                    CAR;        # nat : @some : mutez : @some : list operation : @parameter%make_deal : @storage
                    SWAP;       # @some : nat : mutez : @some : list operation : @parameter%make_deal : @storage
                    DUP;        # @some : @some : nat : mutez : @some : list operation : @parameter%make_deal : @storage
                    DUG 5;      # @some : nat : mutez : @some : list operation : @some : @parameter%make_deal : @storage
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : nat : mutez : @some : list operation : @some : @parameter%make_deal : @storage
                    CAR;        # pair (nat %amount) (address %borrower) : nat : mutez : @some : list operation : @some : @parameter%make_deal : @storage
                    CDR;        # address : nat : mutez : @some : list operation : @some : @parameter%make_deal : @storage
                    SENDER;     # @sender : address : nat : mutez : @some : list operation : @some : @parameter%make_deal : @storage
                    PAIR 3;     # pair @sender (pair address nat) : mutez : @some : list operation : @some : @parameter%make_deal : @storage
                    TRANSFER_TOKENS; # operation : list operation : @some : @parameter%make_deal : @storage
                    CONS;       # list operation : @some : @parameter%make_deal : @storage
                    # self.data.ndeal += 1 # list operation : @some : @parameter%make_deal : @storage
                    DIG 3;      # @storage : list operation : @some : @parameter%make_deal
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal
                    SWAP;       # pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @some : @parameter%make_deal
                    UNPAIR;     # pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan)) : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @some : @parameter%make_deal
                    UNPAIR;     # mutez : pair (nat %ndeal) (nat %nloan) : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @some : @parameter%make_deal
                    SWAP;       # pair (nat %ndeal) (nat %nloan) : mutez : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @some : @parameter%make_deal
                    UNPAIR;     # nat : nat : mutez : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @some : @parameter%make_deal
                    PUSH nat 1; # nat : nat : nat : mutez : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @some : @parameter%make_deal
                    ADD;        # nat : nat : mutez : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @some : @parameter%make_deal
                    PAIR;       # pair nat nat : mutez : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @some : @parameter%make_deal
                    SWAP;       # mutez : pair nat nat : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @some : @parameter%make_deal
                    PAIR;       # pair mutez (pair nat nat) : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @some : @parameter%make_deal
                    PAIR;       # pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @some : @parameter%make_deal
                    SWAP;       # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal
                    PAIR;       # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : list operation : @some : @parameter%make_deal
                    # self.data.deals[self.data.ndeal] = sp.record(amount = loan.value.amount, borrower = loan.value.borrower, creditor = sp.sender, deposit = loan.value.deposit, exp = sp.add_seconds(sp.now, sp.to_int(loan.value.time)), reward = loan.value.reward, token = loan.value.token, token_address = loan.value.token_address, ts = sp.now) # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : list operation : @some : @parameter%make_deal
                    DUP;        # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : list operation : @some : @parameter%make_deal
                    DUG 4;      # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    UNPAIR;     # set address : pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    SWAP;       # pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))) : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    UNPAIR;     # option key_hash : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    SWAP;       # big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    NOW;        # @now : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DUP 8;      # @some : @now : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    GET 5;      # address : @now : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    PAIR;       # pair address @now : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DUP 8;      # @some : pair address @now : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    GET 3;      # pair (nat %time) (string %token) : pair address @now : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CDR;        # string : pair address @now : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    PAIR;       # pair string (pair address @now) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DIG 7;      # @some : pair string (pair address @now) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DUP;        # @some : @some : pair string (pair address @now) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : @some : pair string (pair address @now) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    GET 6;      # nat : @some : pair string (pair address @now) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    SWAP;       # @some : nat : pair string (pair address @now) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DUP;        # @some : @some : nat : pair string (pair address @now) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DUG 9;      # @some : nat : pair string (pair address @now) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    GET 3;      # pair (nat %time) (string %token) : nat : pair string (pair address @now) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CAR;        # nat : nat : pair string (pair address @now) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    INT;        # int : nat : pair string (pair address @now) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    NOW;        # @now : int : nat : pair string (pair address @now) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    ADD;        # timestamp : nat : pair string (pair address @now) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    PAIR;       # pair timestamp nat : pair string (pair address @now) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    PAIR;       # pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DUP 8;      # @some : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    GET 3;      # mutez : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    SENDER;     # @sender : mutez : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    PAIR;       # pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DIG 8;      # @some : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DUP;        # @some : @some : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : @some : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CAR;        # pair (nat %amount) (address %borrower) : @some : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CDR;        # address : @some : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    SWAP;       # @some : address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DUP;        # @some : @some : address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DUG 10;     # @some : address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CAR;        # pair (nat %amount) (address %borrower) : address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    CAR;        # nat : address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    PAIR;       # pair nat address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    PAIR;       # pair (pair nat address) (pair @sender mutez) : pair (pair timestamp nat) (pair string (pair address @now)) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    PAIR;       # pair (pair (pair nat address) (pair @sender mutez)) (pair (pair timestamp nat) (pair string (pair address @now))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    SOME;       # option (pair (pair (pair nat address) (pair @sender mutez)) (pair (pair timestamp nat) (pair string (pair address @now)))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                    DIG 9;      # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : option (pair (pair (pair nat address) (pair @sender mutez)) (pair (pair timestamp nat) (pair string (pair address @now)))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal
                    GET 3;      # pair mutez (pair nat nat) : option (pair (pair (pair nat address) (pair @sender mutez)) (pair (pair timestamp nat) (pair string (pair address @now)))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal
                    GET 3;      # nat : option (pair (pair (pair nat address) (pair @sender mutez)) (pair (pair timestamp nat) (pair string (pair address @now)))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal
                    UPDATE;     # big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal
                    SWAP;       # option key_hash : big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))) : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal
                    PAIR;       # pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))) : set address : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal
                    SWAP;       # set address : pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal
                    PAIR;       # pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal
                    SWAP;       # pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal
                    # self.data.deposits -= loan.value.fee # pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal
                    UNPAIR;     # mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @some : @parameter%make_deal
                    DIG 5;      # @some : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal
                    GET 5;      # mutez : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal
                    SWAP;       # mutez : mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal
                    SUB_MUTEZ;  # option mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal
                    IF_NONE
                      {
                        PUSH int 292; # int : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal
                    SWAP;       # pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : @some : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal
                    # del self.data.loans[params.id] # pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : @some : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal
                    UNPAIR;     # nat : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : @some : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal
                    SWAP;       # big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : @some : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal
                    NONE (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))); # option (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : @some : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation : @parameter%make_deal
                    DIG 7;      # @parameter%make_deal : option (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))) : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : nat : @some : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    UPDATE;     # big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))) : nat : @some : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    SWAP;       # nat : big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))) : @some : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    PAIR;       # pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp)))))) : @some : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    SWAP;       # @some : pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp)))))) : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    PAIR;       # pair @some (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))) : pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    SWAP;       # pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair @some (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    PAIR;       # pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair @some (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp)))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : list operation
                    PAIR;       # pair (pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair @some (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))) : list operation
                    SWAP;       # list operation : pair (pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair @some (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                  }
                  {
                    # == pause ==
                    # sp.verify(sp.amount == sp.tez(0), 'OD_ILLEGAL_TX_AMOUNT') # @parameter%pause : @storage
                    PUSH mutez 0; # mutez : @parameter%pause : @storage
                    AMOUNT;     # @amount : mutez : @parameter%pause : @storage
                    COMPARE;    # int : @parameter%pause : @storage
                    EQ;         # bool : @parameter%pause : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_TX_AMOUNT"; # string : @parameter%pause : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%pause : @storage
                    SWAP;       # @storage : @parameter%pause
                    # sp.verify(self.data.admins.contains(sp.sender), 'OD_ACCESS_DENIED') # @storage : @parameter%pause
                    DUP;        # @storage : @storage : @parameter%pause
                    DUG 2;      # @storage : @parameter%pause : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%pause : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : @parameter%pause : @storage
                    CAR;        # set address : @parameter%pause : @storage
                    SENDER;     # @sender : set address : @parameter%pause : @storage
                    MEM;        # bool : @parameter%pause : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%pause : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%pause : @storage
                    # sp.verify(self.data.pause != params.pause, 'OD_ILLEGAL_ARGUMENT:pause') # @parameter%pause : @storage
                    DUP;        # @parameter%pause : @parameter%pause : @storage
                    DUP 3;      # @storage : @parameter%pause : @parameter%pause : @storage
                    GET 5;      # bool : @parameter%pause : @parameter%pause : @storage
                    COMPARE;    # int : @parameter%pause : @storage
                    NEQ;        # bool : @parameter%pause : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:pause"; # string : @parameter%pause : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%pause : @storage
                    # self.data.pause = params.pause # @parameter%pause : @storage
                    UPDATE 5;   # @storage
                    NIL operation; # list operation : @storage
                  }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
              }
              {
                IF_LEFT
                  {
                    # == remove_admin ==
                    # sp.verify(sp.amount == sp.tez(0), 'OD_ILLEGAL_TX_AMOUNT') # @parameter%remove_admin : @storage
                    PUSH mutez 0; # mutez : @parameter%remove_admin : @storage
                    AMOUNT;     # @amount : mutez : @parameter%remove_admin : @storage
                    COMPARE;    # int : @parameter%remove_admin : @storage
                    EQ;         # bool : @parameter%remove_admin : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_TX_AMOUNT"; # string : @parameter%remove_admin : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%remove_admin : @storage
                    SWAP;       # @storage : @parameter%remove_admin
                    # sp.verify(self.data.admins.contains(sp.sender), 'OD_ACCESS_DENIED') # @storage : @parameter%remove_admin
                    DUP;        # @storage : @storage : @parameter%remove_admin
                    DUG 2;      # @storage : @parameter%remove_admin : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%remove_admin : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : @parameter%remove_admin : @storage
                    CAR;        # set address : @parameter%remove_admin : @storage
                    SENDER;     # @sender : set address : @parameter%remove_admin : @storage
                    MEM;        # bool : @parameter%remove_admin : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%remove_admin : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%remove_admin : @storage
                    # sp.verify(sp.address('tz1fE6hEiRFa9ZHJeZrccNKsGW7jdxfe9vcv') != params.address, 'OD_ILLEGAL_ARGUMENT:address') # @parameter%remove_admin : @storage
                    DUP;        # @parameter%remove_admin : @parameter%remove_admin : @storage
                    PUSH address "tz1fE6hEiRFa9ZHJeZrccNKsGW7jdxfe9vcv"; # address : @parameter%remove_admin : @parameter%remove_admin : @storage
                    COMPARE;    # int : @parameter%remove_admin : @storage
                    NEQ;        # bool : @parameter%remove_admin : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:address"; # string : @parameter%remove_admin : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%remove_admin : @storage
                    SWAP;       # @storage : @parameter%remove_admin
                    # sp.verify(self.data.admins.contains(params.address), 'OD_ILLEGAL_ARGUMENT:address') # @storage : @parameter%remove_admin
                    DUP;        # @storage : @storage : @parameter%remove_admin
                    DUG 2;      # @storage : @parameter%remove_admin : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%remove_admin : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : @parameter%remove_admin : @storage
                    CAR;        # set address : @parameter%remove_admin : @storage
                    SWAP;       # @parameter%remove_admin : set address : @storage
                    DUP;        # @parameter%remove_admin : @parameter%remove_admin : set address : @storage
                    DUG 2;      # @parameter%remove_admin : set address : @parameter%remove_admin : @storage
                    MEM;        # bool : @parameter%remove_admin : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:address"; # string : @parameter%remove_admin : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%remove_admin : @storage
                    SWAP;       # @storage : @parameter%remove_admin
                    # self.data.admins.remove(params.address) # @storage : @parameter%remove_admin
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%remove_admin
                    UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%remove_admin
                    UNPAIR;     # set address : pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%remove_admin
                    PUSH bool False; # bool : set address : pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%remove_admin
                    DIG 5;      # @parameter%remove_admin : bool : set address : pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    UPDATE;     # set address : pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    PAIR;       # pair (set address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    PAIR;       # pair (pair (set address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    PAIR;       # pair (pair (pair (set address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                  }
                  {
                    # == remove_token ==
                    # sp.verify(sp.amount == sp.tez(0), 'OD_ILLEGAL_TX_AMOUNT') # @parameter%remove_token : @storage
                    PUSH mutez 0; # mutez : @parameter%remove_token : @storage
                    AMOUNT;     # @amount : mutez : @parameter%remove_token : @storage
                    COMPARE;    # int : @parameter%remove_token : @storage
                    EQ;         # bool : @parameter%remove_token : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_TX_AMOUNT"; # string : @parameter%remove_token : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%remove_token : @storage
                    SWAP;       # @storage : @parameter%remove_token
                    # sp.verify(self.data.admins.contains(sp.sender), 'OD_ACCESS_DENIED') # @storage : @parameter%remove_token
                    DUP;        # @storage : @storage : @parameter%remove_token
                    DUG 2;      # @storage : @parameter%remove_token : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%remove_token : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : @parameter%remove_token : @storage
                    CAR;        # set address : @parameter%remove_token : @storage
                    SENDER;     # @sender : set address : @parameter%remove_token : @storage
                    MEM;        # bool : @parameter%remove_token : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%remove_token : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%remove_token : @storage
                    SWAP;       # @storage : @parameter%remove_token
                    # sp.verify(self.data.tokens.contains(params.name), 'OD_ILLEGAL_ARGUMENT:name') # @storage : @parameter%remove_token
                    DUP;        # @storage : @storage : @parameter%remove_token
                    DUG 2;      # @storage : @parameter%remove_token : @storage
                    GET 8;      # big_map string address : @parameter%remove_token : @storage
                    SWAP;       # @parameter%remove_token : big_map string address : @storage
                    DUP;        # @parameter%remove_token : @parameter%remove_token : big_map string address : @storage
                    DUG 2;      # @parameter%remove_token : big_map string address : @parameter%remove_token : @storage
                    MEM;        # bool : @parameter%remove_token : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:name"; # string : @parameter%remove_token : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%remove_token : @storage
                    SWAP;       # @storage : @parameter%remove_token
                    # del self.data.tokens[params.name] # @storage : @parameter%remove_token
                    DUP;        # @storage : @storage : @parameter%remove_token
                    GET 8;      # big_map string address : @storage : @parameter%remove_token
                    NONE address; # option address : big_map string address : @storage : @parameter%remove_token
                    DIG 3;      # @parameter%remove_token : option address : big_map string address : @storage
                    UPDATE;     # big_map string address : @storage
                    UPDATE 8;   # @storage
                  }; # pair (pair (pair (set address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                NIL operation; # list operation : pair (pair (pair (set address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
              }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # == set_fee ==
                    # sp.verify(sp.amount == sp.tez(0), 'OD_ILLEGAL_TX_AMOUNT') # @parameter%set_fee : @storage
                    PUSH mutez 0; # mutez : @parameter%set_fee : @storage
                    AMOUNT;     # @amount : mutez : @parameter%set_fee : @storage
                    COMPARE;    # int : @parameter%set_fee : @storage
                    EQ;         # bool : @parameter%set_fee : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_TX_AMOUNT"; # string : @parameter%set_fee : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%set_fee : @storage
                    SWAP;       # @storage : @parameter%set_fee
                    # sp.verify(self.data.admins.contains(sp.sender), 'OD_ACCESS_DENIED') # @storage : @parameter%set_fee
                    DUP;        # @storage : @storage : @parameter%set_fee
                    DUG 2;      # @storage : @parameter%set_fee : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%set_fee : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : @parameter%set_fee : @storage
                    CAR;        # set address : @parameter%set_fee : @storage
                    SENDER;     # @sender : set address : @parameter%set_fee : @storage
                    MEM;        # bool : @parameter%set_fee : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%set_fee : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%set_fee : @storage
                    # sp.verify(self.data.fee != params.fee, 'OD_ILLEGAL_ARGUMENT:fee') # @parameter%set_fee : @storage
                    DUP;        # @parameter%set_fee : @parameter%set_fee : @storage
                    DUP 3;      # @storage : @parameter%set_fee : @parameter%set_fee : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%set_fee : @parameter%set_fee : @storage
                    GET 5;      # nat : @parameter%set_fee : @parameter%set_fee : @storage
                    COMPARE;    # int : @parameter%set_fee : @storage
                    NEQ;        # bool : @parameter%set_fee : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:fee"; # string : @parameter%set_fee : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%set_fee : @storage
                    # sp.verify(params.fee < 10000, 'OD_ILLEGAL_ARGUMENT:fee') # @parameter%set_fee : @storage
                    DUP;        # @parameter%set_fee : @parameter%set_fee : @storage
                    PUSH nat 10000; # nat : @parameter%set_fee : @parameter%set_fee : @storage
                    COMPARE;    # int : @parameter%set_fee : @storage
                    GT;         # bool : @parameter%set_fee : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:fee"; # string : @parameter%set_fee : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%set_fee : @storage
                    SWAP;       # @storage : @parameter%set_fee
                    # self.data.fee = params.fee # @storage : @parameter%set_fee
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%set_fee
                    UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%set_fee
                    SWAP;       # pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%set_fee
                    UNPAIR;     # mutez : pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%set_fee
                    SWAP;       # pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%set_fee
                    CDR;        # big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%set_fee
                    DIG 4;      # @parameter%set_fee : big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    PAIR;       # pair @parameter%set_fee (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    SWAP;       # mutez : pair @parameter%set_fee (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    PAIR;       # pair mutez (pair @parameter%set_fee (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    SWAP;       # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : pair mutez (pair @parameter%set_fee (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    PAIR;       # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair @parameter%set_fee (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    PAIR;       # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair @parameter%set_fee (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                  }
                  {
                    # == set_min_deposit ==
                    # sp.verify(sp.amount == sp.tez(0), 'OD_ILLEGAL_TX_AMOUNT') # @parameter%set_min_deposit : @storage
                    PUSH mutez 0; # mutez : @parameter%set_min_deposit : @storage
                    AMOUNT;     # @amount : mutez : @parameter%set_min_deposit : @storage
                    COMPARE;    # int : @parameter%set_min_deposit : @storage
                    EQ;         # bool : @parameter%set_min_deposit : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_TX_AMOUNT"; # string : @parameter%set_min_deposit : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%set_min_deposit : @storage
                    SWAP;       # @storage : @parameter%set_min_deposit
                    # sp.verify(self.data.admins.contains(sp.sender), 'OD_ACCESS_DENIED') # @storage : @parameter%set_min_deposit
                    DUP;        # @storage : @storage : @parameter%set_min_deposit
                    DUG 2;      # @storage : @parameter%set_min_deposit : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%set_min_deposit : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : @parameter%set_min_deposit : @storage
                    CAR;        # set address : @parameter%set_min_deposit : @storage
                    SENDER;     # @sender : set address : @parameter%set_min_deposit : @storage
                    MEM;        # bool : @parameter%set_min_deposit : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%set_min_deposit : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%set_min_deposit : @storage
                    # sp.verify(self.data.min_deposit != params.min_deposit, 'OD_ILLEGAL_ARGUMENT:min_deposit') # @parameter%set_min_deposit : @storage
                    DUP;        # @parameter%set_min_deposit : @parameter%set_min_deposit : @storage
                    DUP 3;      # @storage : @parameter%set_min_deposit : @parameter%set_min_deposit : @storage
                    GET 3;      # pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan)) : @parameter%set_min_deposit : @parameter%set_min_deposit : @storage
                    CAR;        # mutez : @parameter%set_min_deposit : @parameter%set_min_deposit : @storage
                    COMPARE;    # int : @parameter%set_min_deposit : @storage
                    NEQ;        # bool : @parameter%set_min_deposit : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:min_deposit"; # string : @parameter%set_min_deposit : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%set_min_deposit : @storage
                    SWAP;       # @storage : @parameter%set_min_deposit
                    # self.data.min_deposit = params.min_deposit # @storage : @parameter%set_min_deposit
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : @parameter%set_min_deposit
                    SWAP;       # pair (pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%set_min_deposit
                    UNPAIR;     # pair (mutez %min_deposit) (pair (nat %ndeal) (nat %nloan)) : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%set_min_deposit
                    CDR;        # pair (nat %ndeal) (nat %nloan) : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%set_min_deposit
                    DIG 3;      # @parameter%set_min_deposit : pair (nat %ndeal) (nat %nloan) : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))
                    PAIR;       # pair @parameter%set_min_deposit (pair (nat %ndeal) (nat %nloan)) : pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))
                    PAIR;       # pair (pair @parameter%set_min_deposit (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))) : pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))
                    SWAP;       # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair @parameter%set_min_deposit (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))
                    PAIR;       # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair @parameter%set_min_deposit (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                  }; # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
                NIL operation; # list operation : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
              }
              {
                IF_LEFT
                  {
                    # == set_time ==
                    # sp.verify(sp.amount == sp.tez(0), 'OD_ILLEGAL_TX_AMOUNT') # @parameter%set_time : @storage
                    PUSH mutez 0; # mutez : @parameter%set_time : @storage
                    AMOUNT;     # @amount : mutez : @parameter%set_time : @storage
                    COMPARE;    # int : @parameter%set_time : @storage
                    EQ;         # bool : @parameter%set_time : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_TX_AMOUNT"; # string : @parameter%set_time : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%set_time : @storage
                    SWAP;       # @storage : @parameter%set_time
                    # sp.verify(self.data.admins.contains(sp.sender), 'OD_ACCESS_DENIED') # @storage : @parameter%set_time
                    DUP;        # @storage : @storage : @parameter%set_time
                    DUG 2;      # @storage : @parameter%set_time : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%set_time : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : @parameter%set_time : @storage
                    CAR;        # set address : @parameter%set_time : @storage
                    SENDER;     # @sender : set address : @parameter%set_time : @storage
                    MEM;        # bool : @parameter%set_time : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%set_time : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%set_time : @storage
                    # sp.verify(self.data.time != params, 'OD_ILLEGAL_ARGUMENT:min,max') # @parameter%set_time : @storage
                    DUP;        # @parameter%set_time : @parameter%set_time : @storage
                    DUP 3;      # @storage : @parameter%set_time : @parameter%set_time : @storage
                    GET 7;      # pair (nat %max) (nat %min) : @parameter%set_time : @parameter%set_time : @storage
                    COMPARE;    # int : @parameter%set_time : @storage
                    NEQ;        # bool : @parameter%set_time : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:min,max"; # string : @parameter%set_time : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%set_time : @storage
                    # sp.verify((params.min > 0) & (params.min <= params.max), 'OD_ILLEGAL_ARGUMENT:min') # @parameter%set_time : @storage
                    DUP;        # @parameter%set_time : @parameter%set_time : @storage
                    CDR;        # nat : @parameter%set_time : @storage
                    PUSH nat 0; # nat : nat : @parameter%set_time : @storage
                    COMPARE;    # int : @parameter%set_time : @storage
                    LT;         # bool : @parameter%set_time : @storage
                    IF
                      {
                        DUP;        # @parameter%set_time : @parameter%set_time : @storage
                        CAR;        # nat : @parameter%set_time : @storage
                        SWAP;       # @parameter%set_time : nat : @storage
                        DUP;        # @parameter%set_time : @parameter%set_time : nat : @storage
                        DUG 2;      # @parameter%set_time : nat : @parameter%set_time : @storage
                        CDR;        # nat : nat : @parameter%set_time : @storage
                        COMPARE;    # int : @parameter%set_time : @storage
                        LE;         # bool : @parameter%set_time : @storage
                      }
                      {
                        PUSH bool False; # bool : @parameter%set_time : @storage
                      }; # bool : @parameter%set_time : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:min"; # string : @parameter%set_time : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%set_time : @storage
                    # self.data.time = params # @parameter%set_time : @storage
                    UPDATE 7;   # @storage
                    NIL operation; # list operation : @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%withdraw
                    # == withdraw ==
                    # sp.verify(self.data.admins.contains(sp.sender), 'OD_ACCESS_DENIED') # @storage : @parameter%withdraw
                    DUP;        # @storage : @storage : @parameter%withdraw
                    DUG 2;      # @storage : @parameter%withdraw : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%withdraw : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts))))))) : @parameter%withdraw : @storage
                    CAR;        # set address : @parameter%withdraw : @storage
                    SENDER;     # @sender : set address : @parameter%withdraw : @storage
                    MEM;        # bool : @parameter%withdraw : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%withdraw : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%withdraw : @storage
                    # sp.verify(params.amount > sp.tez(0), 'OD_ILLEGAL_ARGUMENT:amount') # @parameter%withdraw : @storage
                    DUP;        # @parameter%withdraw : @parameter%withdraw : @storage
                    CDR;        # mutez : @parameter%withdraw : @storage
                    PUSH mutez 0; # mutez : mutez : @parameter%withdraw : @storage
                    COMPARE;    # int : @parameter%withdraw : @storage
                    LT;         # bool : @parameter%withdraw : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:amount"; # string : @parameter%withdraw : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%withdraw : @storage
                    # sp.verify((sp.balance - self.data.deposits) >= params.amount, 'OD_ILLEGAL_ARGUMENT:amount') # @parameter%withdraw : @storage
                    DUP;        # @parameter%withdraw : @parameter%withdraw : @storage
                    CDR;        # mutez : @parameter%withdraw : @storage
                    DUP 3;      # @storage : mutez : @parameter%withdraw : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (big_map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%withdraw : @storage
                    GET 3;      # mutez : mutez : @parameter%withdraw : @storage
                    BALANCE;    # @balance : mutez : mutez : @parameter%withdraw : @storage
                    SUB_MUTEZ;  # option mutez : mutez : @parameter%withdraw : @storage
                    IF_NONE
                      {
                        PUSH int 86; # int : mutez : @parameter%withdraw : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : mutez : @parameter%withdraw : @storage
                    COMPARE;    # int : @parameter%withdraw : @storage
                    GE;         # bool : @parameter%withdraw : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT:amount"; # string : @parameter%withdraw : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%withdraw : @storage
                    # sp.send(params.address, params.amount) # @parameter%withdraw : @storage
                    DUP;        # @parameter%withdraw : @parameter%withdraw : @storage
                    CAR;        # address : @parameter%withdraw : @storage
                    CONTRACT unit; # option (contract unit) : @parameter%withdraw : @storage
                    IF_NONE
                      {
                        PUSH int 87; # int : @parameter%withdraw : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%withdraw : @storage
                    NIL operation; # list operation : @some : @parameter%withdraw : @storage
                    SWAP;       # @some : list operation : @parameter%withdraw : @storage
                    DIG 2;      # @parameter%withdraw : @some : list operation : @storage
                    CDR;        # mutez : @some : list operation : @storage
                    UNIT;       # unit : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }; # list operation : @storage
              }; # list operation : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (big_map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %token_address) (timestamp %ts)))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (nat %time) (string %token)) (pair (address %token_address) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
          }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
      }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
    NIL operation; # list operation : list operation : pair (pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
    SWAP;       # list operation : list operation : pair (pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
    ITER
      {
        CONS;       # list operation : pair (pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
      }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address))))
    PAIR;       # pair (list operation) (pair (pair (pair (set address) (pair (option key_hash) (big_map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (big_map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair nat string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (nat %max) (nat %min)) (big_map %tokens string address)))))
  };