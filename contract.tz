parameter (or (or (or (address %addAdmin) (or (pair %addLoan (pair (nat %amount) (pair (mutez %deposit) (nat %reward))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (option %validity timestamp)))) (pair %addToken (address %address) (string %name)))) (or (or (nat %cancelLoan) (nat %closeDeal)) (or (unit %default) (option %delegate key_hash)))) (or (or (or (nat %makeDeal) (address %removeAdmin)) (or (string %removeToken) (nat %setFee))) (or (or (mutez %setMinDeposit) (bool %setPause)) (or (pair %setTime (int %max) (int %min)) (pair %withdraw (address %address) (mutez %amount))))));
storage   (pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%addAdmin
                DUP;        # @storage : @storage : @parameter%addAdmin
                DUG 2;      # @storage : @parameter%addAdmin : @storage
                CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%addAdmin : @storage
                CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%addAdmin : @storage
                CAR;        # set address : @parameter%addAdmin : @storage
                SENDER;     # @sender : set address : @parameter%addAdmin : @storage
                MEM;        # bool : @parameter%addAdmin : @storage
                IF
                  {}
                  {
                    PUSH string "OD_ACCESS_DENIED"; # string : @parameter%addAdmin : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%addAdmin : @storage
                SWAP;       # @storage : @parameter%addAdmin
                DUP;        # @storage : @storage : @parameter%addAdmin
                DUG 2;      # @storage : @parameter%addAdmin : @storage
                CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%addAdmin : @storage
                CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%addAdmin : @storage
                CAR;        # set address : @parameter%addAdmin : @storage
                SWAP;       # @parameter%addAdmin : set address : @storage
                DUP;        # @parameter%addAdmin : @parameter%addAdmin : set address : @storage
                DUG 2;      # @parameter%addAdmin : set address : @parameter%addAdmin : @storage
                MEM;        # bool : @parameter%addAdmin : @storage
                IF
                  {
                    PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%addAdmin : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%addAdmin : @storage
                SWAP;       # @storage : @parameter%addAdmin
                UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%addAdmin
                UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%addAdmin
                UNPAIR;     # set address : pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%addAdmin
                PUSH bool True; # bool : set address : pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%addAdmin
                DIG 5;      # @parameter%addAdmin : bool : set address : pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                UPDATE;     # set address : pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                PAIR;       # pair (set address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                PAIR;       # pair (pair (set address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                PAIR;       # pair (pair (pair (set address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%addLoan
                    DUP;        # @storage : @storage : @parameter%addLoan
                    DUG 2;      # @storage : @parameter%addLoan : @storage
                    GET 5;      # bool : @parameter%addLoan : @storage
                    IF
                      {
                        PUSH string "OD_PAUSED"; # string : @parameter%addLoan : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @parameter%addLoan : @storage
                    DUP;        # @parameter%addLoan : @parameter%addLoan : @storage
                    CAR;        # pair (nat %amount) (pair (mutez %deposit) (nat %reward)) : @parameter%addLoan : @storage
                    CAR;        # nat : @parameter%addLoan : @storage
                    PUSH nat 0; # nat : nat : @parameter%addLoan : @storage
                    COMPARE;    # int : @parameter%addLoan : @storage
                    LT;         # bool : @parameter%addLoan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%addLoan : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%addLoan : @storage
                    DUP;        # @parameter%addLoan : @parameter%addLoan : @storage
                    CAR;        # pair (nat %amount) (pair (mutez %deposit) (nat %reward)) : @parameter%addLoan : @storage
                    GET 4;      # nat : @parameter%addLoan : @storage
                    PUSH nat 0; # nat : nat : @parameter%addLoan : @storage
                    SWAP;       # nat : nat : @parameter%addLoan : @storage
                    COMPARE;    # int : @parameter%addLoan : @storage
                    GE;         # bool : @parameter%addLoan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%addLoan : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%addLoan : @storage
                    SWAP;       # @storage : @parameter%addLoan
                    DUP;        # @storage : @storage : @parameter%addLoan
                    DUG 2;      # @storage : @parameter%addLoan : @storage
                    GET 8;      # map string address : @parameter%addLoan : @storage
                    SWAP;       # @parameter%addLoan : map string address : @storage
                    DUP;        # @parameter%addLoan : @parameter%addLoan : map string address : @storage
                    DUG 2;      # @parameter%addLoan : map string address : @parameter%addLoan : @storage
                    GET 3;      # pair (int %time) (string %token) : map string address : @parameter%addLoan : @storage
                    CDR;        # string : map string address : @parameter%addLoan : @storage
                    MEM;        # bool : @parameter%addLoan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%addLoan : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%addLoan : @storage
                    DUP;        # @parameter%addLoan : @parameter%addLoan : @storage
                    GET 5;      # address : @parameter%addLoan : @storage
                    DUP 3;      # @storage : address : @parameter%addLoan : @storage
                    GET 8;      # map string address : address : @parameter%addLoan : @storage
                    DUP 3;      # @parameter%addLoan : map string address : address : @parameter%addLoan : @storage
                    GET 3;      # pair (int %time) (string %token) : map string address : address : @parameter%addLoan : @storage
                    CDR;        # string : map string address : address : @parameter%addLoan : @storage
                    GET;        # option address : address : @parameter%addLoan : @storage
                    IF_NONE
                      {
                        PUSH int 127; # int : address : @parameter%addLoan : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : @parameter%addLoan : @storage
                    COMPARE;    # int : @parameter%addLoan : @storage
                    EQ;         # bool : @parameter%addLoan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%addLoan : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%addLoan : @storage
                    SWAP;       # @storage : @parameter%addLoan
                    DUP;        # @storage : @storage : @parameter%addLoan
                    DUG 2;      # @storage : @parameter%addLoan : @storage
                    GET 7;      # pair (int %max) (int %min) : @parameter%addLoan : @storage
                    CDR;        # int : @parameter%addLoan : @storage
                    SWAP;       # @parameter%addLoan : int : @storage
                    DUP;        # @parameter%addLoan : @parameter%addLoan : int : @storage
                    DUG 2;      # @parameter%addLoan : int : @parameter%addLoan : @storage
                    GET 3;      # pair (int %time) (string %token) : int : @parameter%addLoan : @storage
                    CAR;        # int : int : @parameter%addLoan : @storage
                    COMPARE;    # int : @parameter%addLoan : @storage
                    GE;         # bool : @parameter%addLoan : @storage
                    IF
                      {
                        SWAP;       # @storage : @parameter%addLoan
                        DUP;        # @storage : @storage : @parameter%addLoan
                        DUG 2;      # @storage : @parameter%addLoan : @storage
                        GET 7;      # pair (int %max) (int %min) : @parameter%addLoan : @storage
                        CAR;        # int : @parameter%addLoan : @storage
                        SWAP;       # @parameter%addLoan : int : @storage
                        DUP;        # @parameter%addLoan : @parameter%addLoan : int : @storage
                        DUG 2;      # @parameter%addLoan : int : @parameter%addLoan : @storage
                        GET 3;      # pair (int %time) (string %token) : int : @parameter%addLoan : @storage
                        CAR;        # int : int : @parameter%addLoan : @storage
                        COMPARE;    # int : @parameter%addLoan : @storage
                        LE;         # bool : @parameter%addLoan : @storage
                      }
                      {
                        PUSH bool False; # bool : @parameter%addLoan : @storage
                      }; # bool : @parameter%addLoan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%addLoan : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%addLoan : @storage
                    SWAP;       # @storage : @parameter%addLoan
                    DUP;        # @storage : @storage : @parameter%addLoan
                    DUG 2;      # @storage : @parameter%addLoan : @storage
                    GET 3;      # pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan)) : @parameter%addLoan : @storage
                    CAR;        # mutez : @parameter%addLoan : @storage
                    SWAP;       # @parameter%addLoan : mutez : @storage
                    DUP;        # @parameter%addLoan : @parameter%addLoan : mutez : @storage
                    DUG 2;      # @parameter%addLoan : mutez : @parameter%addLoan : @storage
                    CAR;        # pair (nat %amount) (pair (mutez %deposit) (nat %reward)) : mutez : @parameter%addLoan : @storage
                    GET 3;      # mutez : mutez : @parameter%addLoan : @storage
                    COMPARE;    # int : @parameter%addLoan : @storage
                    GE;         # bool : @parameter%addLoan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%addLoan : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%addLoan : @storage
                    PUSH mutez 1; # mutez : @parameter%addLoan : @storage
                    PUSH nat 315360000000; # nat : mutez : @parameter%addLoan : @storage
                    DUP 4;      # @storage : nat : mutez : @parameter%addLoan : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : nat : mutez : @parameter%addLoan : @storage
                    GET 5;      # nat : nat : mutez : @parameter%addLoan : @storage
                    DUP 4;      # @parameter%addLoan : nat : nat : mutez : @parameter%addLoan : @storage
                    GET 3;      # pair (int %time) (string %token) : nat : nat : mutez : @parameter%addLoan : @storage
                    CAR;        # int : nat : nat : mutez : @parameter%addLoan : @storage
                    ISNAT;      # option nat : nat : nat : mutez : @parameter%addLoan : @storage
                    IF_NONE
                      {
                        PUSH int 130; # int : nat : nat : mutez : @parameter%addLoan : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : mutez : @parameter%addLoan : @storage
                    PUSH mutez 1; # mutez : @some : nat : nat : mutez : @parameter%addLoan : @storage
                    DUP 6;      # @parameter%addLoan : mutez : @some : nat : nat : mutez : @parameter%addLoan : @storage
                    CAR;        # pair (nat %amount) (pair (mutez %deposit) (nat %reward)) : mutez : @some : nat : nat : mutez : @parameter%addLoan : @storage
                    GET 3;      # mutez : mutez : @some : nat : nat : mutez : @parameter%addLoan : @storage
                    EDIV;       # option (pair nat mutez) : @some : nat : nat : mutez : @parameter%addLoan : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : @some : nat : nat : mutez : @parameter%addLoan : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @some : nat : nat : mutez : @parameter%addLoan : @storage
                    CAR;        # nat : @some : nat : nat : mutez : @parameter%addLoan : @storage
                    MUL;        # nat : nat : nat : mutez : @parameter%addLoan : @storage
                    MUL;        # nat : nat : mutez : @parameter%addLoan : @storage
                    EDIV;       # option (pair nat nat) : mutez : @parameter%addLoan : @storage
                    IF_NONE
                      {
                        PUSH int 130; # int : mutez : @parameter%addLoan : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : mutez : @parameter%addLoan : @storage
                      }; # nat : mutez : @parameter%addLoan : @storage
                    MUL;        # mutez : @parameter%addLoan : @storage
                    DUP;        # mutez : mutez : @parameter%addLoan : @storage
                    AMOUNT;     # @amount : mutez : mutez : @parameter%addLoan : @storage
                    SWAP;       # mutez : @amount : mutez : @parameter%addLoan : @storage
                    DUP 4;      # @parameter%addLoan : mutez : @amount : mutez : @parameter%addLoan : @storage
                    CAR;        # pair (nat %amount) (pair (mutez %deposit) (nat %reward)) : mutez : @amount : mutez : @parameter%addLoan : @storage
                    GET 3;      # mutez : mutez : @amount : mutez : @parameter%addLoan : @storage
                    ADD;        # mutez : @amount : mutez : @parameter%addLoan : @storage
                    COMPARE;    # int : mutez : @parameter%addLoan : @storage
                    EQ;         # bool : mutez : @parameter%addLoan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : mutez : @parameter%addLoan : @storage
                        FAILWITH;   # FAILED
                      }; # mutez : @parameter%addLoan : @storage
                    NONE timestamp; # option timestamp : mutez : @parameter%addLoan : @storage
                    DUP 3;      # @parameter%addLoan : option timestamp : mutez : @parameter%addLoan : @storage
                    GET 6;      # option timestamp : option timestamp : mutez : @parameter%addLoan : @storage
                    COMPARE;    # int : mutez : @parameter%addLoan : @storage
                    EQ;         # bool : mutez : @parameter%addLoan : @storage
                    IF
                      {
                        PUSH bool True; # bool : mutez : @parameter%addLoan : @storage
                      }
                      {
                        NOW;        # @now : mutez : @parameter%addLoan : @storage
                        SOME;       # option timestamp : mutez : @parameter%addLoan : @storage
                        DUP 3;      # @parameter%addLoan : option timestamp : mutez : @parameter%addLoan : @storage
                        GET 6;      # option timestamp : option timestamp : mutez : @parameter%addLoan : @storage
                        COMPARE;    # int : mutez : @parameter%addLoan : @storage
                        GT;         # bool : mutez : @parameter%addLoan : @storage
                      }; # bool : mutez : @parameter%addLoan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : mutez : @parameter%addLoan : @storage
                        FAILWITH;   # FAILED
                      }; # mutez : @parameter%addLoan : @storage
                    DIG 2;      # @storage : mutez : @parameter%addLoan
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan
                    SWAP;       # pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%addLoan
                    UNPAIR;     # pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan)) : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%addLoan
                    UNPAIR;     # mutez : pair (nat %ndeal) (nat %nloan) : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%addLoan
                    SWAP;       # pair (nat %ndeal) (nat %nloan) : mutez : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%addLoan
                    UNPAIR;     # nat : nat : mutez : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%addLoan
                    SWAP;       # nat : nat : mutez : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%addLoan
                    PUSH nat 1; # nat : nat : nat : mutez : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%addLoan
                    ADD;        # nat : nat : mutez : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%addLoan
                    SWAP;       # nat : nat : mutez : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%addLoan
                    PAIR;       # pair nat nat : mutez : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%addLoan
                    SWAP;       # mutez : pair nat nat : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%addLoan
                    PAIR;       # pair mutez (pair nat nat) : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%addLoan
                    PAIR;       # pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%addLoan
                    SWAP;       # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan
                    PAIR;       # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : mutez : @parameter%addLoan
                    DUP;        # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : mutez : @parameter%addLoan
                    DUG 3;      # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    SWAP;       # pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    UNPAIR;     # mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    SWAP;       # pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    UNPAIR;     # nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    SWAP;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 7;      # @parameter%addLoan : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 6;      # option timestamp : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    NOW;        # @now : option timestamp : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    PAIR;       # pair @now (option timestamp) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 9;      # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : pair @now (option timestamp) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 8;      # map string address : pair @now (option timestamp) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 9;      # @parameter%addLoan : map string address : pair @now (option timestamp) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 3;      # pair (int %time) (string %token) : map string address : pair @now (option timestamp) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CDR;        # string : map string address : pair @now (option timestamp) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET;        # option address : pair @now (option timestamp) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    IF_NONE
                      {
                        PUSH int 133; # int : pair @now (option timestamp) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair @now (option timestamp) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    PAIR;       # pair @some (pair @now (option timestamp)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DIG 7;      # @parameter%addLoan : pair @some (pair @now (option timestamp)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP;        # @parameter%addLoan : @parameter%addLoan : pair @some (pair @now (option timestamp)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 3;      # pair (int %time) (string %token) : @parameter%addLoan : pair @some (pair @now (option timestamp)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CDR;        # string : @parameter%addLoan : pair @some (pair @now (option timestamp)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    SWAP;       # @parameter%addLoan : string : pair @some (pair @now (option timestamp)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP;        # @parameter%addLoan : @parameter%addLoan : string : pair @some (pair @now (option timestamp)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUG 9;      # @parameter%addLoan : string : pair @some (pair @now (option timestamp)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 3;      # pair (int %time) (string %token) : string : pair @some (pair @now (option timestamp)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # int : string : pair @some (pair @now (option timestamp)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    PAIR;       # pair int string : pair @some (pair @now (option timestamp)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    PAIR;       # pair (pair int string) (pair @some (pair @now (option timestamp))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 8;      # @parameter%addLoan : pair (pair int string) (pair @some (pair @now (option timestamp))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # pair (nat %amount) (pair (mutez %deposit) (nat %reward)) : pair (pair int string) (pair @some (pair @now (option timestamp))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 4;      # nat : pair (pair int string) (pair @some (pair @now (option timestamp))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : mutez : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DIG 7;      # mutez : nat : pair (pair int string) (pair @some (pair @now (option timestamp))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    PAIR;       # pair mutez nat : pair (pair int string) (pair @some (pair @now (option timestamp))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 8;      # @parameter%addLoan : pair mutez nat : pair (pair int string) (pair @some (pair @now (option timestamp))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # pair (nat %amount) (pair (mutez %deposit) (nat %reward)) : pair mutez nat : pair (pair int string) (pair @some (pair @now (option timestamp))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 3;      # mutez : pair mutez nat : pair (pair int string) (pair @some (pair @now (option timestamp))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    PAIR;       # pair mutez (pair mutez nat) : pair (pair int string) (pair @some (pair @now (option timestamp))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    SENDER;     # @sender : pair mutez (pair mutez nat) : pair (pair int string) (pair @some (pair @now (option timestamp))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%addLoan : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DIG 8;      # @parameter%addLoan : @sender : pair mutez (pair mutez nat) : pair (pair int string) (pair @some (pair @now (option timestamp))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # pair (nat %amount) (pair (mutez %deposit) (nat %reward)) : @sender : pair mutez (pair mutez nat) : pair (pair int string) (pair @some (pair @now (option timestamp))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # nat : @sender : pair mutez (pair mutez nat) : pair (pair int string) (pair @some (pair @now (option timestamp))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    PAIR;       # pair nat @sender : pair mutez (pair mutez nat) : pair (pair int string) (pair @some (pair @now (option timestamp))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    PAIR;       # pair (pair nat @sender) (pair mutez (pair mutez nat)) : pair (pair int string) (pair @some (pair @now (option timestamp))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    PAIR;       # pair (pair (pair nat @sender) (pair mutez (pair mutez nat))) (pair (pair int string) (pair @some (pair @now (option timestamp)))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    SOME;       # option (pair (pair (pair nat @sender) (pair mutez (pair mutez nat))) (pair (pair int string) (pair @some (pair @now (option timestamp))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DIG 6;      # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : option (pair (pair (pair nat @sender) (pair mutez (pair mutez nat))) (pair (pair int string) (pair @some (pair @now (option timestamp))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    GET 3;      # pair mutez (pair nat nat) : option (pair (pair (pair nat @sender) (pair mutez (pair mutez nat))) (pair (pair int string) (pair @some (pair @now (option timestamp))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    GET 4;      # nat : option (pair (pair (pair nat @sender) (pair mutez (pair mutez nat))) (pair (pair int string) (pair @some (pair @now (option timestamp))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    UPDATE;     # map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    SWAP;       # nat : map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    PAIR;       # pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp)))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    SWAP;       # mutez : pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    AMOUNT;     # @amount : mutez : pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    ADD;        # mutez : pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    PAIR;       # pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    SWAP;       # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    PAIR;       # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp)))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    PAIR;       # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                  }
                  {
                    SWAP;       # @storage : @parameter%addToken
                    DUP;        # @storage : @storage : @parameter%addToken
                    DUG 2;      # @storage : @parameter%addToken : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%addToken : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%addToken : @storage
                    CAR;        # set address : @parameter%addToken : @storage
                    SENDER;     # @sender : set address : @parameter%addToken : @storage
                    MEM;        # bool : @parameter%addToken : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%addToken : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%addToken : @storage
                    SWAP;       # @storage : @parameter%addToken
                    DUP;        # @storage : @storage : @parameter%addToken
                    GET 8;      # map string address : @storage : @parameter%addToken
                    DUP 3;      # @parameter%addToken : map string address : @storage : @parameter%addToken
                    CAR;        # address : map string address : @storage : @parameter%addToken
                    SOME;       # option address : map string address : @storage : @parameter%addToken
                    DIG 3;      # @parameter%addToken : option address : map string address : @storage
                    CDR;        # string : option address : map string address : @storage
                    UPDATE;     # map string address : @storage
                    UPDATE 8;   # @storage
                  }; # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
              }; # pair (pair (pair (set address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
            NIL operation; # list operation : pair (pair (pair (set address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%cancelLoan
                    DUP;        # @storage : @storage : @parameter%cancelLoan
                    DUG 2;      # @storage : @parameter%cancelLoan : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%cancelLoan : @storage
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @parameter%cancelLoan : @storage
                    SWAP;       # @parameter%cancelLoan : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @storage
                    DUP;        # @parameter%cancelLoan : @parameter%cancelLoan : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @storage
                    DUG 2;      # @parameter%cancelLoan : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @parameter%cancelLoan : @storage
                    MEM;        # bool : @parameter%cancelLoan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%cancelLoan : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%cancelLoan : @storage
                    SWAP;       # @storage : @parameter%cancelLoan
                    DUP;        # @storage : @storage : @parameter%cancelLoan
                    DUG 2;      # @storage : @parameter%cancelLoan : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%cancelLoan : @storage
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @parameter%cancelLoan : @storage
                    SWAP;       # @parameter%cancelLoan : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @storage
                    DUP;        # @parameter%cancelLoan : @parameter%cancelLoan : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @storage
                    DUG 2;      # @parameter%cancelLoan : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @parameter%cancelLoan : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @parameter%cancelLoan : @storage
                    IF_NONE
                      {
                        PUSH int 154; # int : @parameter%cancelLoan : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%cancelLoan : @storage
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : @parameter%cancelLoan : @storage
                    CAR;        # pair (nat %amount) (address %borrower) : @parameter%cancelLoan : @storage
                    CDR;        # address : @parameter%cancelLoan : @storage
                    SENDER;     # @sender : address : @parameter%cancelLoan : @storage
                    COMPARE;    # int : @parameter%cancelLoan : @storage
                    EQ;         # bool : @parameter%cancelLoan : @storage
                    IF
                      {
                        PUSH bool True; # bool : @parameter%cancelLoan : @storage
                      }
                      {
                        SWAP;       # @storage : @parameter%cancelLoan
                        DUP;        # @storage : @storage : @parameter%cancelLoan
                        DUG 2;      # @storage : @parameter%cancelLoan : @storage
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%cancelLoan : @storage
                        CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%cancelLoan : @storage
                        CAR;        # set address : @parameter%cancelLoan : @storage
                        SENDER;     # @sender : set address : @parameter%cancelLoan : @storage
                        MEM;        # bool : @parameter%cancelLoan : @storage
                      }; # bool : @parameter%cancelLoan : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%cancelLoan : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%cancelLoan : @storage
                    NIL operation; # list operation : @parameter%cancelLoan : @storage
                    DUP 3;      # @storage : list operation : @parameter%cancelLoan : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @parameter%cancelLoan : @storage
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : list operation : @parameter%cancelLoan : @storage
                    DUP 3;      # @parameter%cancelLoan : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : list operation : @parameter%cancelLoan : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : list operation : @parameter%cancelLoan : @storage
                    IF_NONE
                      {
                        PUSH int 154; # int : list operation : @parameter%cancelLoan : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%cancelLoan : @storage
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : list operation : @parameter%cancelLoan : @storage
                    CAR;        # pair (nat %amount) (address %borrower) : list operation : @parameter%cancelLoan : @storage
                    CDR;        # address : list operation : @parameter%cancelLoan : @storage
                    CONTRACT unit; # option (contract unit) : list operation : @parameter%cancelLoan : @storage
                    IF_NONE
                      {
                        PUSH int 156; # int : list operation : @parameter%cancelLoan : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%cancelLoan : @storage
                    DUP 4;      # @storage : @some : list operation : @parameter%cancelLoan : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @some : list operation : @parameter%cancelLoan : @storage
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @some : list operation : @parameter%cancelLoan : @storage
                    DUP 4;      # @parameter%cancelLoan : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @some : list operation : @parameter%cancelLoan : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @some : list operation : @parameter%cancelLoan : @storage
                    IF_NONE
                      {
                        PUSH int 154; # int : @some : list operation : @parameter%cancelLoan : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @some : list operation : @parameter%cancelLoan : @storage
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : @some : list operation : @parameter%cancelLoan : @storage
                    GET 5;      # mutez : @some : list operation : @parameter%cancelLoan : @storage
                    DUP 5;      # @storage : mutez : @some : list operation : @parameter%cancelLoan : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @some : list operation : @parameter%cancelLoan : @storage
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : @some : list operation : @parameter%cancelLoan : @storage
                    DUP 5;      # @parameter%cancelLoan : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : @some : list operation : @parameter%cancelLoan : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : @some : list operation : @parameter%cancelLoan : @storage
                    IF_NONE
                      {
                        PUSH int 154; # int : mutez : @some : list operation : @parameter%cancelLoan : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : mutez : @some : list operation : @parameter%cancelLoan : @storage
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : mutez : @some : list operation : @parameter%cancelLoan : @storage
                    GET 3;      # mutez : mutez : @some : list operation : @parameter%cancelLoan : @storage
                    ADD;        # mutez : @some : list operation : @parameter%cancelLoan : @storage
                    UNIT;       # unit : mutez : @some : list operation : @parameter%cancelLoan : @storage
                    TRANSFER_TOKENS; # operation : list operation : @parameter%cancelLoan : @storage
                    CONS;       # list operation : @parameter%cancelLoan : @storage
                    DUP 3;      # @storage : list operation : @parameter%cancelLoan : @storage
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan : @storage
                    UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan : @storage
                    SWAP;       # pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan : @storage
                    UNPAIR;     # mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan : @storage
                    DUP 7;      # @storage : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan : @storage
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan : @storage
                    DUP 7;      # @parameter%cancelLoan : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan : @storage
                    IF_NONE
                      {
                        PUSH int 154; # int : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan : @storage
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan : @storage
                    GET 5;      # mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan : @storage
                    DIG 7;      # @storage : mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan
                    DUP 8;      # @parameter%cancelLoan : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan
                    IF_NONE
                      {
                        PUSH int 154; # int : mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan
                    GET 3;      # mutez : mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan
                    ADD;        # mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan
                    SWAP;       # mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan
                    SUB;        # mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan
                    SWAP;       # pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan
                    UNPAIR;     # nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan
                    SWAP;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan
                    NONE (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))); # option (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%cancelLoan
                    DIG 7;      # @parameter%cancelLoan : option (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                    UPDATE;     # map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))) : nat : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                    SWAP;       # nat : map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                    PAIR;       # pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp)))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                    SWAP;       # mutez : pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                    PAIR;       # pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                    SWAP;       # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                    PAIR;       # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp)))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                    PAIR;       # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : list operation
                    SWAP;       # list operation : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                  }
                  {
                    SWAP;       # @storage : @parameter%closeDeal
                    DUP;        # @storage : @storage : @parameter%closeDeal
                    DUG 2;      # @storage : @parameter%closeDeal : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%closeDeal : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%closeDeal : @storage
                    GET 4;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @parameter%closeDeal : @storage
                    SWAP;       # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @storage
                    DUP;        # @parameter%closeDeal : @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @storage
                    DUG 2;      # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @parameter%closeDeal : @storage
                    MEM;        # bool : @parameter%closeDeal : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%closeDeal : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%closeDeal : @storage
                    SWAP;       # @storage : @parameter%closeDeal
                    DUP;        # @storage : @storage : @parameter%closeDeal
                    DUG 2;      # @storage : @parameter%closeDeal : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%closeDeal : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%closeDeal : @storage
                    GET 4;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @parameter%closeDeal : @storage
                    SWAP;       # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @storage
                    DUP;        # @parameter%closeDeal : @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @storage
                    DUG 2;      # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @parameter%closeDeal : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @parameter%closeDeal : @storage
                    IF_NONE
                      {
                        PUSH int 191; # int : @parameter%closeDeal : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%closeDeal : @storage
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : @parameter%closeDeal : @storage
                    CAR;        # pair (nat %amount) (address %borrower) : @parameter%closeDeal : @storage
                    CDR;        # address : @parameter%closeDeal : @storage
                    SENDER;     # @sender : address : @parameter%closeDeal : @storage
                    COMPARE;    # int : @parameter%closeDeal : @storage
                    EQ;         # bool : @parameter%closeDeal : @storage
                    IF
                      {
                        PUSH bool True; # bool : @parameter%closeDeal : @storage
                      }
                      {
                        SWAP;       # @storage : @parameter%closeDeal
                        DUP;        # @storage : @storage : @parameter%closeDeal
                        DUG 2;      # @storage : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%closeDeal : @storage
                        CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%closeDeal : @storage
                        GET 4;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @parameter%closeDeal : @storage
                        SWAP;       # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @storage
                        DUP;        # @parameter%closeDeal : @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @storage
                        DUG 2;      # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @parameter%closeDeal : @storage
                        GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @parameter%closeDeal : @storage
                        IF_NONE
                          {
                            PUSH int 191; # int : @parameter%closeDeal : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : @parameter%closeDeal : @storage
                        GET 3;      # address : @parameter%closeDeal : @storage
                        SENDER;     # @sender : address : @parameter%closeDeal : @storage
                        COMPARE;    # int : @parameter%closeDeal : @storage
                        EQ;         # bool : @parameter%closeDeal : @storage
                      }; # bool : @parameter%closeDeal : @storage
                    IF
                      {
                        PUSH bool True; # bool : @parameter%closeDeal : @storage
                      }
                      {
                        SWAP;       # @storage : @parameter%closeDeal
                        DUP;        # @storage : @storage : @parameter%closeDeal
                        DUG 2;      # @storage : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%closeDeal : @storage
                        CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%closeDeal : @storage
                        CAR;        # set address : @parameter%closeDeal : @storage
                        SENDER;     # @sender : set address : @parameter%closeDeal : @storage
                        MEM;        # bool : @parameter%closeDeal : @storage
                      }; # bool : @parameter%closeDeal : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%closeDeal : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%closeDeal : @storage
                    SWAP;       # @storage : @parameter%closeDeal
                    DUP;        # @storage : @storage : @parameter%closeDeal
                    DUG 2;      # @storage : @parameter%closeDeal : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%closeDeal : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%closeDeal : @storage
                    GET 4;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @parameter%closeDeal : @storage
                    SWAP;       # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @storage
                    DUP;        # @parameter%closeDeal : @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @storage
                    DUG 2;      # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @parameter%closeDeal : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @parameter%closeDeal : @storage
                    IF_NONE
                      {
                        PUSH int 191; # int : @parameter%closeDeal : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%closeDeal : @storage
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : @parameter%closeDeal : @storage
                    CAR;        # pair (nat %amount) (address %borrower) : @parameter%closeDeal : @storage
                    CDR;        # address : @parameter%closeDeal : @storage
                    SENDER;     # @sender : address : @parameter%closeDeal : @storage
                    COMPARE;    # int : @parameter%closeDeal : @storage
                    EQ;         # bool : @parameter%closeDeal : @storage
                    IF
                      {
                        NIL operation; # list operation : @parameter%closeDeal : @storage
                        DUP 3;      # @storage : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : list operation : @parameter%closeDeal : @storage
                        GET 4;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : list operation : @parameter%closeDeal : @storage
                        DUP 3;      # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : list operation : @parameter%closeDeal : @storage
                        GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : list operation : @parameter%closeDeal : @storage
                        IF_NONE
                          {
                            PUSH int 191; # int : list operation : @parameter%closeDeal : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%closeDeal : @storage
                        GET 7;      # address : list operation : @parameter%closeDeal : @storage
                        CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : @parameter%closeDeal : @storage
                        IF_NONE
                          {
                            PUSH int 207; # int : list operation : @parameter%closeDeal : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%closeDeal : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%closeDeal : @storage
                        DUP 5;      # @storage : mutez : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : mutez : @some : list operation : @parameter%closeDeal : @storage
                        GET 4;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : mutez : @some : list operation : @parameter%closeDeal : @storage
                        DUP 5;      # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : mutez : @some : list operation : @parameter%closeDeal : @storage
                        GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : mutez : @some : list operation : @parameter%closeDeal : @storage
                        IF_NONE
                          {
                            PUSH int 191; # int : mutez : @some : list operation : @parameter%closeDeal : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : mutez : @some : list operation : @parameter%closeDeal : @storage
                        GET 3;      # pair (timestamp %exp) (nat %reward) : mutez : @some : list operation : @parameter%closeDeal : @storage
                        CDR;        # nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        DUP 6;      # @storage : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        GET 4;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        DUP 6;      # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        IF_NONE
                          {
                            PUSH int 191; # int : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (nat %amount) (address %borrower) : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # nat : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        ADD;        # nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        DUP 6;      # @storage : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        GET 4;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        DUP 6;      # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        IF_NONE
                          {
                            PUSH int 191; # int : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        GET 3;      # address : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        DUP 7;      # @storage : address : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : address : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : address : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        GET 4;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : address : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        DUP 7;      # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : address : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : address : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        IF_NONE
                          {
                            PUSH int 191; # int : address : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : address : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : address : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (nat %amount) (address %borrower) : address : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        CDR;        # address : address : nat : mutez : @some : list operation : @parameter%closeDeal : @storage
                        PAIR 3;     # pair address (pair address nat) : mutez : @some : list operation : @parameter%closeDeal : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%closeDeal : @storage
                        CONS;       # list operation : @parameter%closeDeal : @storage
                        DUP 3;      # @storage : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : list operation : @parameter%closeDeal : @storage
                        GET 4;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : list operation : @parameter%closeDeal : @storage
                        DUP 3;      # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : list operation : @parameter%closeDeal : @storage
                        GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : list operation : @parameter%closeDeal : @storage
                        IF_NONE
                          {
                            PUSH int 191; # int : list operation : @parameter%closeDeal : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (nat %amount) (address %borrower) : list operation : @parameter%closeDeal : @storage
                        CDR;        # address : list operation : @parameter%closeDeal : @storage
                        CONTRACT unit; # option (contract unit) : list operation : @parameter%closeDeal : @storage
                        IF_NONE
                          {
                            PUSH int 195; # int : list operation : @parameter%closeDeal : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%closeDeal : @storage
                        DUP 4;      # @storage : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @some : list operation : @parameter%closeDeal : @storage
                        GET 4;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @some : list operation : @parameter%closeDeal : @storage
                        DUP 4;      # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @some : list operation : @parameter%closeDeal : @storage
                        GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @some : list operation : @parameter%closeDeal : @storage
                        IF_NONE
                          {
                            PUSH int 191; # int : @some : list operation : @parameter%closeDeal : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : @some : list operation : @parameter%closeDeal : @storage
                        GET 4;      # mutez : @some : list operation : @parameter%closeDeal : @storage
                        UNIT;       # unit : mutez : @some : list operation : @parameter%closeDeal : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%closeDeal : @storage
                        CONS;       # list operation : @parameter%closeDeal : @storage
                        DUP 3;      # @storage : list operation : @parameter%closeDeal : @storage
                        UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal : @storage
                        UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal : @storage
                        SWAP;       # pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal : @storage
                        UNPAIR;     # mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal : @storage
                        DIG 6;      # @storage : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        GET 4;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        DUP 7;      # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        IF_NONE
                          {
                            PUSH int 191; # int : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        GET 4;      # mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        SWAP;       # mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        SUB;        # mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        PAIR;       # pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        SWAP;       # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        UNPAIR;     # set address : pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        SWAP;       # pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : set address : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        UNPAIR;     # option key_hash : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : set address : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        SWAP;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        NONE (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))); # option (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        DIG 7;      # @parameter%closeDeal : option (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                        UPDATE;     # map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))) : option key_hash : set address : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                        SWAP;       # option key_hash : map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))) : set address : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                        PAIR;       # pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))) : set address : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                        SWAP;       # set address : pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))) : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                        PAIR;       # pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                        PAIR;       # pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                        PAIR;       # pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : list operation
                        SWAP;       # list operation : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                      }
                      {
                        NOW;        # @now : @parameter%closeDeal : @storage
                        DUP 3;      # @storage : @now : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @now : @parameter%closeDeal : @storage
                        CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @now : @parameter%closeDeal : @storage
                        GET 4;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @now : @parameter%closeDeal : @storage
                        DUP 3;      # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @now : @parameter%closeDeal : @storage
                        GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @now : @parameter%closeDeal : @storage
                        IF_NONE
                          {
                            PUSH int 191; # int : @now : @parameter%closeDeal : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @now : @parameter%closeDeal : @storage
                        GET 3;      # pair (timestamp %exp) (nat %reward) : @now : @parameter%closeDeal : @storage
                        CAR;        # timestamp : @now : @parameter%closeDeal : @storage
                        COMPARE;    # int : @parameter%closeDeal : @storage
                        LT;         # bool : @parameter%closeDeal : @storage
                        IF
                          {}
                          {
                            PUSH string "OD_ACCESS_DENIED"; # string : @parameter%closeDeal : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%closeDeal : @storage
                        NIL operation; # list operation : @parameter%closeDeal : @storage
                        DUP 3;      # @storage : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : list operation : @parameter%closeDeal : @storage
                        GET 4;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : list operation : @parameter%closeDeal : @storage
                        DUP 3;      # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : list operation : @parameter%closeDeal : @storage
                        GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : list operation : @parameter%closeDeal : @storage
                        IF_NONE
                          {
                            PUSH int 191; # int : list operation : @parameter%closeDeal : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : list operation : @parameter%closeDeal : @storage
                        GET 3;      # address : list operation : @parameter%closeDeal : @storage
                        CONTRACT unit; # option (contract unit) : list operation : @parameter%closeDeal : @storage
                        IF_NONE
                          {
                            PUSH int 200; # int : list operation : @parameter%closeDeal : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%closeDeal : @storage
                        DUP 4;      # @storage : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @some : list operation : @parameter%closeDeal : @storage
                        GET 4;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @some : list operation : @parameter%closeDeal : @storage
                        DUP 4;      # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @some : list operation : @parameter%closeDeal : @storage
                        GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : @some : list operation : @parameter%closeDeal : @storage
                        IF_NONE
                          {
                            PUSH int 191; # int : @some : list operation : @parameter%closeDeal : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @some : list operation : @parameter%closeDeal : @storage
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : @some : list operation : @parameter%closeDeal : @storage
                        GET 4;      # mutez : @some : list operation : @parameter%closeDeal : @storage
                        UNIT;       # unit : mutez : @some : list operation : @parameter%closeDeal : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%closeDeal : @storage
                        CONS;       # list operation : @parameter%closeDeal : @storage
                        DUP 3;      # @storage : list operation : @parameter%closeDeal : @storage
                        UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal : @storage
                        UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal : @storage
                        SWAP;       # pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal : @storage
                        UNPAIR;     # mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal : @storage
                        DIG 6;      # @storage : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        GET 4;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        DUP 7;      # @parameter%closeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        IF_NONE
                          {
                            PUSH int 191; # int : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit)) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        GET 4;      # mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        SWAP;       # mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        SUB;        # mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        PAIR;       # pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        SWAP;       # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        UNPAIR;     # set address : pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        SWAP;       # pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : set address : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        UNPAIR;     # option key_hash : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : set address : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        SWAP;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        NONE (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))); # option (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%closeDeal
                        DIG 7;      # @parameter%closeDeal : option (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                        UPDATE;     # map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))) : option key_hash : set address : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                        SWAP;       # option key_hash : map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))) : set address : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                        PAIR;       # pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))) : set address : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                        SWAP;       # set address : pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))) : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                        PAIR;       # pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                        PAIR;       # pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                        PAIR;       # pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : list operation
                        SWAP;       # list operation : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                      }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                  }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
              }
              {
                IF_LEFT
                  {
                    DROP;       # @storage
                    NIL operation; # list operation : @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%delegate
                    DUP;        # @storage : @storage : @parameter%delegate
                    DUG 2;      # @storage : @parameter%delegate : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%delegate : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%delegate : @storage
                    CAR;        # set address : @parameter%delegate : @storage
                    SENDER;     # @sender : set address : @parameter%delegate : @storage
                    MEM;        # bool : @parameter%delegate : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%delegate : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%delegate : @storage
                    DUP;        # @parameter%delegate : @parameter%delegate : @storage
                    DUP 3;      # @storage : @parameter%delegate : @parameter%delegate : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%delegate : @parameter%delegate : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%delegate : @parameter%delegate : @storage
                    GET 3;      # option key_hash : @parameter%delegate : @parameter%delegate : @storage
                    COMPARE;    # int : @parameter%delegate : @storage
                    NEQ;        # bool : @parameter%delegate : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%delegate : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%delegate : @storage
                    SWAP;       # @storage : @parameter%delegate
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%delegate
                    UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%delegate
                    UNPAIR;     # set address : pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%delegate
                    SWAP;       # pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%delegate
                    CDR;        # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%delegate
                    DUP 5;      # @parameter%delegate : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%delegate
                    PAIR;       # pair @parameter%delegate (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%delegate
                    SWAP;       # set address : pair @parameter%delegate (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%delegate
                    PAIR;       # pair (set address) (pair @parameter%delegate (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%delegate
                    PAIR;       # pair (pair (set address) (pair @parameter%delegate (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%delegate
                    PAIR;       # pair (pair (pair (set address) (pair @parameter%delegate (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : @parameter%delegate
                    SWAP;       # @parameter%delegate : pair (pair (pair (set address) (pair @parameter%delegate (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    SET_DELEGATE; # operation : pair (pair (pair (set address) (pair @parameter%delegate (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    NIL operation; # list operation : operation : pair (pair (pair (set address) (pair @parameter%delegate (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    SWAP;       # operation : list operation : pair (pair (pair (set address) (pair @parameter%delegate (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CONS;       # list operation : pair (pair (pair (set address) (pair @parameter%delegate (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                  }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
              }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
          }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%makeDeal
                    DUP;        # @storage : @storage : @parameter%makeDeal
                    DUG 2;      # @storage : @parameter%makeDeal : @storage
                    GET 5;      # bool : @parameter%makeDeal : @storage
                    IF
                      {
                        PUSH string "OD_PAUSED"; # string : @parameter%makeDeal : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @parameter%makeDeal : @storage
                    SWAP;       # @storage : @parameter%makeDeal
                    DUP;        # @storage : @storage : @parameter%makeDeal
                    DUG 2;      # @storage : @parameter%makeDeal : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%makeDeal : @storage
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @parameter%makeDeal : @storage
                    SWAP;       # @parameter%makeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @storage
                    DUP;        # @parameter%makeDeal : @parameter%makeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @storage
                    DUG 2;      # @parameter%makeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @parameter%makeDeal : @storage
                    MEM;        # bool : @parameter%makeDeal : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%makeDeal : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%makeDeal : @storage
                    SENDER;     # @sender : @parameter%makeDeal : @storage
                    DUP 3;      # @storage : @sender : @parameter%makeDeal : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @sender : @parameter%makeDeal : @storage
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @sender : @parameter%makeDeal : @storage
                    DUP 3;      # @parameter%makeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @sender : @parameter%makeDeal : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @sender : @parameter%makeDeal : @storage
                    IF_NONE
                      {
                        PUSH int 166; # int : @sender : @parameter%makeDeal : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @sender : @parameter%makeDeal : @storage
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : @sender : @parameter%makeDeal : @storage
                    CAR;        # pair (nat %amount) (address %borrower) : @sender : @parameter%makeDeal : @storage
                    CDR;        # address : @sender : @parameter%makeDeal : @storage
                    COMPARE;    # int : @parameter%makeDeal : @storage
                    NEQ;        # bool : @parameter%makeDeal : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%makeDeal : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%makeDeal : @storage
                    NONE timestamp; # option timestamp : @parameter%makeDeal : @storage
                    DUP 3;      # @storage : option timestamp : @parameter%makeDeal : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : option timestamp : @parameter%makeDeal : @storage
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : option timestamp : @parameter%makeDeal : @storage
                    DUP 3;      # @parameter%makeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : option timestamp : @parameter%makeDeal : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : option timestamp : @parameter%makeDeal : @storage
                    IF_NONE
                      {
                        PUSH int 166; # int : option timestamp : @parameter%makeDeal : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : option timestamp : @parameter%makeDeal : @storage
                    GET 8;      # option timestamp : option timestamp : @parameter%makeDeal : @storage
                    COMPARE;    # int : @parameter%makeDeal : @storage
                    EQ;         # bool : @parameter%makeDeal : @storage
                    IF
                      {
                        PUSH bool True; # bool : @parameter%makeDeal : @storage
                      }
                      {
                        NOW;        # @now : @parameter%makeDeal : @storage
                        SOME;       # option timestamp : @parameter%makeDeal : @storage
                        DUP 3;      # @storage : option timestamp : @parameter%makeDeal : @storage
                        CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : option timestamp : @parameter%makeDeal : @storage
                        GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : option timestamp : @parameter%makeDeal : @storage
                        DUP 3;      # @parameter%makeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : option timestamp : @parameter%makeDeal : @storage
                        GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : option timestamp : @parameter%makeDeal : @storage
                        IF_NONE
                          {
                            PUSH int 166; # int : option timestamp : @parameter%makeDeal : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : option timestamp : @parameter%makeDeal : @storage
                        GET 8;      # option timestamp : option timestamp : @parameter%makeDeal : @storage
                        COMPARE;    # int : @parameter%makeDeal : @storage
                        GT;         # bool : @parameter%makeDeal : @storage
                      }; # bool : @parameter%makeDeal : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%makeDeal : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%makeDeal : @storage
                    NIL operation; # list operation : @parameter%makeDeal : @storage
                    DUP 3;      # @storage : list operation : @parameter%makeDeal : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @parameter%makeDeal : @storage
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : list operation : @parameter%makeDeal : @storage
                    DUP 3;      # @parameter%makeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : list operation : @parameter%makeDeal : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : list operation : @parameter%makeDeal : @storage
                    IF_NONE
                      {
                        PUSH int 166; # int : list operation : @parameter%makeDeal : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%makeDeal : @storage
                    GET 5;      # address : list operation : @parameter%makeDeal : @storage
                    CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : @parameter%makeDeal : @storage
                    IF_NONE
                      {
                        PUSH int 207; # int : list operation : @parameter%makeDeal : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%makeDeal : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%makeDeal : @storage
                    DUP 5;      # @storage : mutez : @some : list operation : @parameter%makeDeal : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @some : list operation : @parameter%makeDeal : @storage
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : @some : list operation : @parameter%makeDeal : @storage
                    DUP 5;      # @parameter%makeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : @some : list operation : @parameter%makeDeal : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : @some : list operation : @parameter%makeDeal : @storage
                    IF_NONE
                      {
                        PUSH int 166; # int : mutez : @some : list operation : @parameter%makeDeal : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : mutez : @some : list operation : @parameter%makeDeal : @storage
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : mutez : @some : list operation : @parameter%makeDeal : @storage
                    CAR;        # pair (nat %amount) (address %borrower) : mutez : @some : list operation : @parameter%makeDeal : @storage
                    CAR;        # nat : mutez : @some : list operation : @parameter%makeDeal : @storage
                    DUP 6;      # @storage : nat : mutez : @some : list operation : @parameter%makeDeal : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : nat : mutez : @some : list operation : @parameter%makeDeal : @storage
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : @some : list operation : @parameter%makeDeal : @storage
                    DUP 6;      # @parameter%makeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : @some : list operation : @parameter%makeDeal : @storage
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : @some : list operation : @parameter%makeDeal : @storage
                    IF_NONE
                      {
                        PUSH int 166; # int : nat : mutez : @some : list operation : @parameter%makeDeal : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : mutez : @some : list operation : @parameter%makeDeal : @storage
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : nat : mutez : @some : list operation : @parameter%makeDeal : @storage
                    CAR;        # pair (nat %amount) (address %borrower) : nat : mutez : @some : list operation : @parameter%makeDeal : @storage
                    CDR;        # address : nat : mutez : @some : list operation : @parameter%makeDeal : @storage
                    SENDER;     # @sender : address : nat : mutez : @some : list operation : @parameter%makeDeal : @storage
                    PAIR 3;     # pair @sender (pair address nat) : mutez : @some : list operation : @parameter%makeDeal : @storage
                    TRANSFER_TOKENS; # operation : list operation : @parameter%makeDeal : @storage
                    CONS;       # list operation : @parameter%makeDeal : @storage
                    DIG 2;      # @storage : list operation : @parameter%makeDeal
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    SWAP;       # pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @parameter%makeDeal
                    UNPAIR;     # pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan)) : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @parameter%makeDeal
                    UNPAIR;     # mutez : pair (nat %ndeal) (nat %nloan) : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @parameter%makeDeal
                    SWAP;       # pair (nat %ndeal) (nat %nloan) : mutez : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @parameter%makeDeal
                    UNPAIR;     # nat : nat : mutez : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @parameter%makeDeal
                    PUSH nat 1; # nat : nat : nat : mutez : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @parameter%makeDeal
                    ADD;        # nat : nat : mutez : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @parameter%makeDeal
                    PAIR;       # pair nat nat : mutez : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @parameter%makeDeal
                    SWAP;       # mutez : pair nat nat : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @parameter%makeDeal
                    PAIR;       # pair mutez (pair nat nat) : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @parameter%makeDeal
                    PAIR;       # pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : list operation : @parameter%makeDeal
                    SWAP;       # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    PAIR;       # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : list operation : @parameter%makeDeal
                    DUP;        # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : list operation : @parameter%makeDeal
                    DUG 3;      # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    UNPAIR;     # set address : pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    SWAP;       # pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    UNPAIR;     # option key_hash : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    SWAP;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    NOW;        # @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 9;      # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 9;      # @parameter%makeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    IF_NONE
                      {
                        PUSH int 166; # int : @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 5;      # address : @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    PAIR;       # pair address @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 9;      # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : pair address @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair address @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : pair address @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 9;      # @parameter%makeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : pair address @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : pair address @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    IF_NONE
                      {
                        PUSH int 166; # int : pair address @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair address @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 3;      # pair (int %time) (string %token) : pair address @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CDR;        # string : pair address @now : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    PAIR;       # pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 9;      # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 9;      # @parameter%makeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    IF_NONE
                      {
                        PUSH int 166; # int : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 6;      # nat : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 10;     # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : nat : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : nat : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 10;     # @parameter%makeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    IF_NONE
                      {
                        PUSH int 166; # int : nat : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 3;      # pair (int %time) (string %token) : nat : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # int : nat : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    NOW;        # @now : int : nat : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    ADD;        # timestamp : nat : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    PAIR;       # pair timestamp nat : pair string (pair address @now) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    PAIR;       # pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 9;      # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 9;      # @parameter%makeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    IF_NONE
                      {
                        PUSH int 166; # int : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 3;      # mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    SENDER;     # @sender : mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    PAIR;       # pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 10;     # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 10;     # @parameter%makeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    IF_NONE
                      {
                        PUSH int 166; # int : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # pair (nat %amount) (address %borrower) : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CDR;        # address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 11;     # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DUP 11;     # @parameter%makeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    IF_NONE
                      {
                        PUSH int 166; # int : address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # pair (nat %amount) (address %borrower) : address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    CAR;        # nat : address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    PAIR;       # pair nat address : pair @sender mutez : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    PAIR;       # pair (pair nat address) (pair @sender mutez) : pair (pair timestamp nat) (pair string (pair address @now)) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    PAIR;       # pair (pair (pair nat address) (pair @sender mutez)) (pair (pair timestamp nat) (pair string (pair address @now))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    SOME;       # option (pair (pair (pair nat address) (pair @sender mutez)) (pair (pair timestamp nat) (pair string (pair address @now)))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DIG 8;      # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : option (pair (pair (pair nat address) (pair @sender mutez)) (pair (pair timestamp nat) (pair string (pair address @now)))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    GET 3;      # pair mutez (pair nat nat) : option (pair (pair (pair nat address) (pair @sender mutez)) (pair (pair timestamp nat) (pair string (pair address @now)))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    GET 3;      # nat : option (pair (pair (pair nat address) (pair @sender mutez)) (pair (pair timestamp nat) (pair string (pair address @now)))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    UPDATE;     # map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))) : option key_hash : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    SWAP;       # option key_hash : map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))) : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    PAIR;       # pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))) : set address : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    SWAP;       # set address : pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    PAIR;       # pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    PAIR;       # pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    PAIR;       # pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : list operation : @parameter%makeDeal
                    DUP;        # pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : list operation : @parameter%makeDeal
                    DUG 3;      # pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : list operation : @parameter%makeDeal : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    UNPAIR;     # pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    UNPAIR;     # pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    SWAP;       # pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    UNPAIR;     # mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    DIG 6;      # pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    CAR;        # pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    GET 6;      # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    DUP 7;      # @parameter%makeDeal : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    GET;        # option (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    IF_NONE
                      {
                        PUSH int 166; # int : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    CAR;        # pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward))) : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    GET 5;      # mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    SWAP;       # mutez : mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    SUB;        # mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    SWAP;       # pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : mutez : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    UNPAIR;     # nat : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    SWAP;       # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    NONE (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))); # option (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation : @parameter%makeDeal
                    DIG 7;      # @parameter%makeDeal : option (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))) : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : nat : mutez : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                    UPDATE;     # map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))) : nat : mutez : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                    SWAP;       # nat : map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))) : mutez : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                    PAIR;       # pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp)))))) : mutez : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                    SWAP;       # mutez : pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp)))))) : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                    PAIR;       # pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))) : pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                    SWAP;       # pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp)))))) : pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                    PAIR;       # pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp)))))))) : pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : list operation
                    PAIR;       # pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))) : list operation
                    SWAP;       # list operation : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                  }
                  {
                    SWAP;       # @storage : @parameter%removeAdmin
                    DUP;        # @storage : @storage : @parameter%removeAdmin
                    DUG 2;      # @storage : @parameter%removeAdmin : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%removeAdmin : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%removeAdmin : @storage
                    CAR;        # set address : @parameter%removeAdmin : @storage
                    SENDER;     # @sender : set address : @parameter%removeAdmin : @storage
                    MEM;        # bool : @parameter%removeAdmin : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%removeAdmin : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%removeAdmin : @storage
                    DUP;        # @parameter%removeAdmin : @parameter%removeAdmin : @storage
                    PUSH address "tz1bYhHrJkaAevtpbfzZb4RBTgV9agWzsqkd"; # address : @parameter%removeAdmin : @parameter%removeAdmin : @storage
                    COMPARE;    # int : @parameter%removeAdmin : @storage
                    NEQ;        # bool : @parameter%removeAdmin : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%removeAdmin : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%removeAdmin : @storage
                    SWAP;       # @storage : @parameter%removeAdmin
                    DUP;        # @storage : @storage : @parameter%removeAdmin
                    DUG 2;      # @storage : @parameter%removeAdmin : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%removeAdmin : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%removeAdmin : @storage
                    CAR;        # set address : @parameter%removeAdmin : @storage
                    SWAP;       # @parameter%removeAdmin : set address : @storage
                    DUP;        # @parameter%removeAdmin : @parameter%removeAdmin : set address : @storage
                    DUG 2;      # @parameter%removeAdmin : set address : @parameter%removeAdmin : @storage
                    MEM;        # bool : @parameter%removeAdmin : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%removeAdmin : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%removeAdmin : @storage
                    SWAP;       # @storage : @parameter%removeAdmin
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%removeAdmin
                    UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%removeAdmin
                    UNPAIR;     # set address : pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%removeAdmin
                    PUSH bool False; # bool : set address : pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%removeAdmin
                    DIG 5;      # @parameter%removeAdmin : bool : set address : pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    UPDATE;     # set address : pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    PAIR;       # pair (set address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    PAIR;       # pair (pair (set address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    PAIR;       # pair (pair (pair (set address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                    NIL operation; # list operation : pair (pair (pair (set address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                  }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%removeToken
                    DUP;        # @storage : @storage : @parameter%removeToken
                    DUG 2;      # @storage : @parameter%removeToken : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%removeToken : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%removeToken : @storage
                    CAR;        # set address : @parameter%removeToken : @storage
                    SENDER;     # @sender : set address : @parameter%removeToken : @storage
                    MEM;        # bool : @parameter%removeToken : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%removeToken : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%removeToken : @storage
                    SWAP;       # @storage : @parameter%removeToken
                    DUP;        # @storage : @storage : @parameter%removeToken
                    DUG 2;      # @storage : @parameter%removeToken : @storage
                    GET 8;      # map string address : @parameter%removeToken : @storage
                    SWAP;       # @parameter%removeToken : map string address : @storage
                    DUP;        # @parameter%removeToken : @parameter%removeToken : map string address : @storage
                    DUG 2;      # @parameter%removeToken : map string address : @parameter%removeToken : @storage
                    MEM;        # bool : @parameter%removeToken : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%removeToken : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%removeToken : @storage
                    SWAP;       # @storage : @parameter%removeToken
                    DUP;        # @storage : @storage : @parameter%removeToken
                    GET 8;      # map string address : @storage : @parameter%removeToken
                    NONE address; # option address : map string address : @storage : @parameter%removeToken
                    DIG 3;      # @parameter%removeToken : option address : map string address : @storage
                    UPDATE;     # map string address : @storage
                    UPDATE 8;   # @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%setFee
                    DUP;        # @storage : @storage : @parameter%setFee
                    DUG 2;      # @storage : @parameter%setFee : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%setFee : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%setFee : @storage
                    CAR;        # set address : @parameter%setFee : @storage
                    SENDER;     # @sender : set address : @parameter%setFee : @storage
                    MEM;        # bool : @parameter%setFee : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%setFee : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setFee : @storage
                    DUP;        # @parameter%setFee : @parameter%setFee : @storage
                    DUP 3;      # @storage : @parameter%setFee : @parameter%setFee : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%setFee : @parameter%setFee : @storage
                    GET 5;      # nat : @parameter%setFee : @parameter%setFee : @storage
                    COMPARE;    # int : @parameter%setFee : @storage
                    NEQ;        # bool : @parameter%setFee : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%setFee : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setFee : @storage
                    DUP;        # @parameter%setFee : @parameter%setFee : @storage
                    PUSH nat 0; # nat : @parameter%setFee : @parameter%setFee : @storage
                    SWAP;       # @parameter%setFee : nat : @parameter%setFee : @storage
                    COMPARE;    # int : @parameter%setFee : @storage
                    GE;         # bool : @parameter%setFee : @storage
                    IF
                      {
                        DUP;        # @parameter%setFee : @parameter%setFee : @storage
                        PUSH nat 10000; # nat : @parameter%setFee : @parameter%setFee : @storage
                        COMPARE;    # int : @parameter%setFee : @storage
                        GT;         # bool : @parameter%setFee : @storage
                      }
                      {
                        PUSH bool False; # bool : @parameter%setFee : @storage
                      }; # bool : @parameter%setFee : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%setFee : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setFee : @storage
                    SWAP;       # @storage : @parameter%setFee
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%setFee
                    UNPAIR;     # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%setFee
                    SWAP;       # pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%setFee
                    UNPAIR;     # mutez : pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%setFee
                    SWAP;       # pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%setFee
                    CDR;        # map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%setFee
                    DIG 4;      # @parameter%setFee : map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    PAIR;       # pair @parameter%setFee (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : mutez : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    SWAP;       # mutez : pair @parameter%setFee (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    PAIR;       # pair mutez (pair @parameter%setFee (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    SWAP;       # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : pair mutez (pair @parameter%setFee (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    PAIR;       # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair mutez (pair @parameter%setFee (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    PAIR;       # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair mutez (pair @parameter%setFee (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                  }; # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair mutez (pair nat (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                NIL operation; # list operation : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair mutez (pair nat (map nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
              }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setMinDeposit
                    DUP;        # @storage : @storage : @parameter%setMinDeposit
                    DUG 2;      # @storage : @parameter%setMinDeposit : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%setMinDeposit : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%setMinDeposit : @storage
                    CAR;        # set address : @parameter%setMinDeposit : @storage
                    SENDER;     # @sender : set address : @parameter%setMinDeposit : @storage
                    MEM;        # bool : @parameter%setMinDeposit : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%setMinDeposit : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setMinDeposit : @storage
                    DUP;        # @parameter%setMinDeposit : @parameter%setMinDeposit : @storage
                    DUP 3;      # @storage : @parameter%setMinDeposit : @parameter%setMinDeposit : @storage
                    GET 3;      # pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan)) : @parameter%setMinDeposit : @parameter%setMinDeposit : @storage
                    CAR;        # mutez : @parameter%setMinDeposit : @parameter%setMinDeposit : @storage
                    COMPARE;    # int : @parameter%setMinDeposit : @storage
                    NEQ;        # bool : @parameter%setMinDeposit : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%setMinDeposit : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setMinDeposit : @storage
                    DUP;        # @parameter%setMinDeposit : @parameter%setMinDeposit : @storage
                    PUSH mutez 0; # mutez : @parameter%setMinDeposit : @parameter%setMinDeposit : @storage
                    SWAP;       # @parameter%setMinDeposit : mutez : @parameter%setMinDeposit : @storage
                    COMPARE;    # int : @parameter%setMinDeposit : @storage
                    GE;         # bool : @parameter%setMinDeposit : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%setMinDeposit : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setMinDeposit : @storage
                    SWAP;       # @storage : @parameter%setMinDeposit
                    UNPAIR;     # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : @parameter%setMinDeposit
                    SWAP;       # pair (pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%setMinDeposit
                    UNPAIR;     # pair (mutez %mindeposit) (pair (nat %ndeal) (nat %nloan)) : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%setMinDeposit
                    CDR;        # pair (nat %ndeal) (nat %nloan) : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%setMinDeposit
                    DIG 3;      # @parameter%setMinDeposit : pair (nat %ndeal) (nat %nloan) : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))
                    PAIR;       # pair @parameter%setMinDeposit (pair (nat %ndeal) (nat %nloan)) : pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))
                    PAIR;       # pair (pair @parameter%setMinDeposit (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))) : pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))
                    SWAP;       # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : pair (pair @parameter%setMinDeposit (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))
                    PAIR;       # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair @parameter%setMinDeposit (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                  }
                  {
                    SWAP;       # @storage : @parameter%setPause
                    DUP;        # @storage : @storage : @parameter%setPause
                    DUG 2;      # @storage : @parameter%setPause : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%setPause : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%setPause : @storage
                    CAR;        # set address : @parameter%setPause : @storage
                    SENDER;     # @sender : set address : @parameter%setPause : @storage
                    MEM;        # bool : @parameter%setPause : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%setPause : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setPause : @storage
                    DUP;        # @parameter%setPause : @parameter%setPause : @storage
                    DUP 3;      # @storage : @parameter%setPause : @parameter%setPause : @storage
                    GET 5;      # bool : @parameter%setPause : @parameter%setPause : @storage
                    COMPARE;    # int : @parameter%setPause : @storage
                    NEQ;        # bool : @parameter%setPause : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%setPause : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setPause : @storage
                    UPDATE 5;   # @storage
                  }; # pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
                NIL operation; # list operation : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setTime
                    DUP;        # @storage : @storage : @parameter%setTime
                    DUG 2;      # @storage : @parameter%setTime : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%setTime : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%setTime : @storage
                    CAR;        # set address : @parameter%setTime : @storage
                    SENDER;     # @sender : set address : @parameter%setTime : @storage
                    MEM;        # bool : @parameter%setTime : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%setTime : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setTime : @storage
                    DUP;        # @parameter%setTime : @parameter%setTime : @storage
                    DUP 3;      # @storage : @parameter%setTime : @parameter%setTime : @storage
                    GET 7;      # pair (int %max) (int %min) : @parameter%setTime : @parameter%setTime : @storage
                    COMPARE;    # int : @parameter%setTime : @storage
                    NEQ;        # bool : @parameter%setTime : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%setTime : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setTime : @storage
                    DUP;        # @parameter%setTime : @parameter%setTime : @storage
                    CDR;        # int : @parameter%setTime : @storage
                    PUSH int 0; # int : int : @parameter%setTime : @storage
                    COMPARE;    # int : @parameter%setTime : @storage
                    LT;         # bool : @parameter%setTime : @storage
                    IF
                      {
                        DUP;        # @parameter%setTime : @parameter%setTime : @storage
                        CAR;        # int : @parameter%setTime : @storage
                        SWAP;       # @parameter%setTime : int : @storage
                        DUP;        # @parameter%setTime : @parameter%setTime : int : @storage
                        DUG 2;      # @parameter%setTime : int : @parameter%setTime : @storage
                        CDR;        # int : int : @parameter%setTime : @storage
                        COMPARE;    # int : @parameter%setTime : @storage
                        LE;         # bool : @parameter%setTime : @storage
                      }
                      {
                        PUSH bool False; # bool : @parameter%setTime : @storage
                      }; # bool : @parameter%setTime : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%setTime : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setTime : @storage
                    UPDATE 7;   # @storage
                    NIL operation; # list operation : @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%withdraw
                    DUP;        # @storage : @storage : @parameter%withdraw
                    DUG 2;      # @storage : @parameter%withdraw : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : @parameter%withdraw : @storage
                    CAR;        # pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts))))))) : @parameter%withdraw : @storage
                    CAR;        # set address : @parameter%withdraw : @storage
                    SENDER;     # @sender : set address : @parameter%withdraw : @storage
                    MEM;        # bool : @parameter%withdraw : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ACCESS_DENIED"; # string : @parameter%withdraw : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%withdraw : @storage
                    DUP;        # @parameter%withdraw : @parameter%withdraw : @storage
                    CDR;        # mutez : @parameter%withdraw : @storage
                    PUSH mutez 0; # mutez : mutez : @parameter%withdraw : @storage
                    COMPARE;    # int : @parameter%withdraw : @storage
                    LT;         # bool : @parameter%withdraw : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%withdraw : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%withdraw : @storage
                    DUP;        # @parameter%withdraw : @parameter%withdraw : @storage
                    CDR;        # mutez : @parameter%withdraw : @storage
                    DUP 3;      # @storage : mutez : @parameter%withdraw : @storage
                    CAR;        # pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp)))))))) : mutez : @parameter%withdraw : @storage
                    GET 3;      # mutez : mutez : @parameter%withdraw : @storage
                    BALANCE;    # @balance : mutez : mutez : @parameter%withdraw : @storage
                    SUB;        # mutez : mutez : @parameter%withdraw : @storage
                    COMPARE;    # int : @parameter%withdraw : @storage
                    GE;         # bool : @parameter%withdraw : @storage
                    IF
                      {}
                      {
                        PUSH string "OD_ILLEGAL_ARGUMENT"; # string : @parameter%withdraw : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%withdraw : @storage
                    DUP;        # @parameter%withdraw : @parameter%withdraw : @storage
                    CAR;        # address : @parameter%withdraw : @storage
                    CONTRACT unit; # option (contract unit) : @parameter%withdraw : @storage
                    IF_NONE
                      {
                        PUSH int 217; # int : @parameter%withdraw : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%withdraw : @storage
                    NIL operation; # list operation : @some : @parameter%withdraw : @storage
                    SWAP;       # @some : list operation : @parameter%withdraw : @storage
                    DIG 2;      # @parameter%withdraw : @some : list operation : @storage
                    CDR;        # mutez : @some : list operation : @storage
                    UNIT;       # unit : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }; # list operation : @storage
              }; # list operation : pair (pair (pair (set %admins address) (pair (option %baker key_hash) (map %deals nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (address %creditor) (mutez %deposit))) (pair (pair (timestamp %exp) (nat %reward)) (pair (string %token) (pair (address %tokenaddress) (timestamp %ts)))))))) (pair (mutez %deposits) (pair (nat %fee) (map %loans nat (pair (pair (pair (nat %amount) (address %borrower)) (pair (mutez %deposit) (pair (mutez %fee) (nat %reward)))) (pair (pair (int %time) (string %token)) (pair (address %tokenaddress) (pair (timestamp %ts) (option %validity timestamp))))))))) (pair (pair mutez (pair (nat %ndeal) (nat %nloan))) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
          }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
      }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
    NIL operation; # list operation : list operation : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
    SWAP;       # list operation : list operation : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
    ITER
      {
        CONS;       # list operation : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
      }; # list operation : pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address))))
    PAIR;       # pair (list operation) (pair (pair (pair (set address) (pair (option key_hash) (map nat (pair (pair (pair nat address) (pair address mutez)) (pair (pair timestamp nat) (pair string (pair address timestamp))))))) (pair mutez (pair nat (map nat (pair (pair (pair nat address) (pair mutez (pair mutez nat))) (pair (pair int string) (pair address (pair timestamp (option timestamp))))))))) (pair (pair mutez (pair nat nat)) (pair (bool %pause) (pair (pair %time (int %max) (int %min)) (map %tokens string address)))))
  };